var tipuesearch = {"pages":[{"title":"npm releasing","text":"Trigger TL;DR Process SeeAlso Trigger そろそろパッチ当てたのリリースしようかと思って、・・・tag打てばCD走るよな・・・と思い git tag 使ったけどCD走る気配がなく・・・ TL;DR .travis.yml のbranchesの定義を追加した為、動かなかった。動くよう修正したのは以下。 --- language : node_js node_js : - \"10\" - \"node\" - \"lts/*\" branches : only : - master - develop - /&#94; greenkeeper / . * $ / - /&#94; v ? [ 0 - 9 \\\\ .] +/ cache : yarn before_install : - curl - o - - L https : //yarnpkg.com/install.sh | bash - export PATH = \"$HOME/.yarn/bin:$PATH\" - yarn global add greenkeeper - lockfile @1 - yarn global add codecov install : yarn before_script : - greenkeeper - lockfile - update script : - yarn test after_script : - codecov - greenkeeper - lockfile - upload jobs : include : - stage : npm release if : tag IS present node_js : \"node\" deploy : provider : npm email : \"$NPM_EMAIL\" api_key : \"$NPM_TOKEN\" skip_cleanup : true on : tags : true git commit yarn version git push origin master --tag 原因判明して解決するまでパッチバージョン9もあげる事に。なんとも情けない。 Process なんで動かないのか。 コマンド間違っているのか？と、git tagをつけたり消したり・・・ travis ciの構成ファイルの jobs の定義をいろいろいじったけど、動かず・・・ travis ciのRequestsをみてみると Branch \"v0.1.10\" not included per configuration. なんてのが あゝ、tagがbranch名になってて、ちょっと前に追加した、branchesの定義でジョブ動かないようになってしまっていたのだなと SeeAlso yarn version Automated npm releases with Travis CI","tags":"memo","url":"https://lupinthe14th.github.io/npm-releasing.html","loc":"https://lupinthe14th.github.io/npm-releasing.html"},{"title":"ext4 root パーティションのサイズを変更する方法","text":"要件 手順 作業前状態 EBSボリュームの変更 resize2fs で拡張（失敗） EBSボリュームのスナップショット作成 fdisk でパーティションを拡張 resize2fs でファイルシステムの拡張 参考資料 要件 なるべく簡単 なるべくサーバ再起動なし 今回の手順ではサーバ再起動が必要となった 手順 作業前状態 # df -h ファイルシス サイズ 使用 残り 使用% マウント位置 dev 992M 0 992M 0% /dev run 1000M 436K 1000M 1% /run /dev/xvda1 16G 15G 211M 99% / tmpfs 1000M 4.0K 1000M 1% /dev/shm tmpfs 1000M 0 1000M 0% /sys/fs/cgroup tmpfs 1000M 1.1M 999M 1% /tmp tmpfs 200M 0 200M 0% /run/user/0 # lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 32G 0 disk └─xvda1 202:1 0 16G 0 part / EBSボリュームの変更 Elastic Volumes を使用して EBS ボリュームを変更する (コンソール) を参考にサイズ変更のみ実施。 resize2fs で拡張（失敗） # resize2fs /dev/xvda1 resize2fs 1.43.4 (31-Jan-2017) The filesystem is already 4194048 (4k) blocks long. Nothing to do! 簡単に resize2fs コマンド一発では拡張出来なかった。 調べたら、 オンラインでEC2のルートディスクを拡張する 同じようなメッセージが出力されている記事を発見したので、 growpart コマンドでパーティションを拡張してみます。 1 growpart` でパーティションを拡張 # growpart /dev/xvda 1 NOCHANGE: partition 1 could only be grown by -32125898 [fudge=20480] あら。拡張出来ないみたい。いろいろ調べたけど fdisk なりで手動でパーティションを拡張するしかなさそう。 EBSボリュームのスナップショット作成 Amazon EBS スナップショットの作成 を参考にスナップショットを作成。 fdisk でパーティションを拡張 # fdisk /dev/xvda fdisk (util-linux 2.29.2) へようこそ。 ここで設定した内容は、書き込みコマンドを実行するまでメモリのみに保持されます。 書き込みコマンドを使用する際は、注意して実行してください。 コマンド (m でヘルプ): p ディスク /dev/xvda: 32 GiB, 34359738368 バイト, 67108864 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: dos ディスク識別子: 0xfd1cae39 デバイス 起動 開始位置 最後から セクタ サイズ Id タイプ /dev/xvda1 2048 33554431 33552384 16G 83 Linux コマンド (m でヘルプ): d パーティション 1 を選択 パーティション 1 を削除しました。 コマンド (m でヘルプ): n パーティションタイプ p 基本パーティション (0 プライマリ, 0 拡張, 4 空き) e 拡張領域 (論理パーティションが入ります) 選択 (既定値 p): p パーティション番号 (1-4, 既定値 1): 1 最初のセクタ (2048-67108863, 既定値 2048): 2048 最終セクタ, +セクタ番号 または +サイズ{K,M,G,T,P} (2048-67108863, 既定値 67108863): 新しいパーティション 1 をタイプ Linux、サイズ 32 GiB で作成しました。 Partition #1 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: N コマンド (m でヘルプ): a パーティション 1 を選択 パーティション 1 の起動フラグを有効にしました。 コマンド (m でヘルプ): p ディスク /dev/xvda: 32 GiB, 34359738368 バイト, 67108864 セクタ 単位: セクタ (1 * 512 = 512 バイト) セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスクラベルのタイプ: dos ディスク識別子: 0xfd1cae39 デバイス 起動 開始位置 最後から セクタ サイズ Id タイプ /dev/xvda1 * 2048 67108863 67106816 32G 83 Linux コマンド (m でヘルプ): w パーティション情報が変更されました。 ioctl() を呼び出してパーティション情報を再読み込みします。 パーティション情報の再読み込みに失敗しました。: デバイスもしくはリソースがビジー状態です カーネルは古い情報を使用しています。新しい情報を利用するには、システムを再起動するか、もしくは partprobe(8) または kpartx(8) を実行してください。 partprobe か kpartx を使えばサーバ再起動する必要なさそうでしたが、調査の過程でサーバー再起動していたので今回はサーバ再起動します。 リブートプロセスで強制的に fsck を実行させるため以下コマンドを実行します。 # touch /forcefsck # reboot resize2fs でファイルシステムの拡張 reboot 後、 resize2fs コマンドでファイルシステムを拡張する。 # resize2fs /dev/xvda1 resize2fs 1.43.4 (31-Jan-2017) Filesystem at /dev/xvda1 is mounted on /; on-line resizing required old_desc_blocks = 2, new_desc_blocks = 4 The filesystem on /dev/xvda1 is now 8388352 (4k) blocks long. # df -h ファイルシス サイズ 使用 残り 使用% マウント位置 dev 992M 0 992M 0% /dev run 1000M 444K 1000M 1% /run /dev/xvda1 32G 15G 16G 50% / tmpfs 1000M 4.0K 1000M 1% /dev/shm tmpfs 1000M 0 1000M 0% /sys/fs/cgroup tmpfs 1000M 12K 1000M 1% /tmp tmpfs 200M 0 200M 0% /run/user/0 無事ファイルシステムの拡張が完了。作成したスナップショットは必要に応じて削除ください。 参考資料 How to resize ext4 root partition live without umount on Linux Elastic Volumes を使用して EBS ボリュームを変更する (コンソール) ボリュームサイズ変更後の Linux ファイルシステムの拡張 オンラインでEC2のルートディスクを拡張する 後で確認したら、AWSのドキュメント パーティションの拡張 (必要な場合) に記載がありますね ↩","tags":"memo","url":"https://lupinthe14th.github.io/ext4-root-pateishiyonnosaizuwobian-geng-surufang-fa.html","loc":"https://lupinthe14th.github.io/ext4-root-pateishiyonnosaizuwobian-geng-surufang-fa.html"},{"title":"ArchlinuxでMastdon","text":"目的 面白そうだからやってみる - 一旦全く使わなくなったawsのアカウントを利用して試す - 仕組みとかわかってきたらRasberryPiで自宅サーバとして運用も視野に入れる ドメインの登録とRRの作成 お手軽にawsのRoute53サービスから新規ドメイン作成し、グローバルIPアドレスを紐付ける Postfix環境の構築 Postfix Install Postfix config Erastic IP aws Route53 RTRの定義とメール配信申請 DKIM config OpenDKIM Install sudo pacman -Sy opendkim Install 手順 前提条件 aws環境にArchlinux環境の構築は省略 yarnのインストール nftablesのインストール rbenvのインストール mastodonユーザーの作成 useradd -m mastodon su - mastodon mastodon clone git clone https://github.com/tootsuite/mastodon.git Install rbenv git clone https : // github . com / rbenv / rbenv . git ~/ . rbenv cd ~/ . rbenv && src / configure && make - C src echo 'export PATH = \"$HOME/.rbenv/bin:$PATH\"' >> ~/ . bash_profile echo 'eval \"$(rbenv init -)\"' >> ~/ . bash_profile git clone https : // github . com / rbenv / ruby - build . git ~/ . rbenv / plugins / ruby - build export PATH = \"$HOME/.rbenv/bin::$PATH\" eval \"$(rbenv init -)\" cd mastodon echo \" Compiling Ruby $(cat .ruby-version): warning, this takes a while!!! \" rbenv install $ ( cat . ruby - version ) rbenv global $ ( cat . ruby - version ) Configure database init postgresql su - postgres initdb --locale $LANG -E UTF8 -D '/var/lib/postgres/data' Configure database sudo -i -u postgres createuser -U postgres mastodon -s Install gems and node modules su - mastodon cd mastodon gem install bundler bundle install yarn install Configure redis systemctl enable redis systemctl start redis Build Mastodon bundle exec rails db:setup RAIS_ENV = production bundle exec rails assets:precompile RAILS_ENV=production 推奨ビルド環境 pacman -S --needed base-devel libffi libyaml openssl zlib mastodonのインストール pacman を利用してパッケージインストールを行う。 pacman -Sy ffmpeg imagemagick libpqxx libxml2 libxslt nodejs postgresql redis yaourt","tags":"Rasberry Pi","url":"https://lupinthe14th.github.io/mastodon.html","loc":"https://lupinthe14th.github.io/mastodon.html"},{"title":"Arch Linux ARM on Rasberry Pi2 の初期設定","text":"はじめに 前提 初期設定 ルートパーティションのリサイズ パーティションテーブルの確認 リサイズ タイムゾーン ロケール ホスト名変更 hostnamectl コマンドの実行 /etc/hosts の修正 固定IPアドレス netctl のインストール 設定 プロファイルの設定 不要サービスの停止 /etc/resolv.conf の修正 名前解決確認 IPv6の無効化 IPv6の無効設定 SSHサーバのIPv6無効化 OS再起動 パスワードの変更 パッケージの更新 パッケージのインストール vimのインストール tmux のインストール sudo のインストール インストール 設定 参考文献 はじめに 前提 設定はMacBook AirからSSH接続にて実施する。 初期設定 ルートパーティションのリサイズ インストールデフォルトだと、ルートパーティションのサイズが1.8Gしかありません。 これをリサイズしてデバイスサイズ全て使うようにします。 # df - h ファイルシス サイズ 使用 残り 使用 % マウント位置 / dev / root 1 . 8 G 1 . 7 G 0 100 % / devtmpfs 457 M 0 457 M 0 % / dev tmpfs 462 M 0 462 M 0 % / dev / shm tmpfs 462 M 320 K 461 M 1 % / run tmpfs 462 M 0 462 M 0 % / sys / fs / cgroup tmpfs 462 M 0 462 M 0 % / tmp / dev / mmcblk0p1 100 M 18 M 82 M 19 % / boot tmpfs 93 M 0 93 M 0 % / run / user / 1000 パーティションテーブルの確認 # fdisk / dev / mmcblk0 fdisk ( util - linux 2 . 28 . 2 ) へようこそ。 ここで設定した内容は、書き込みコマンドを実行するまでメモリのみに保持されます。 書き込みコマンドを使用する際は、注意して実行してください。 コマンド ( m でヘルプ ): p ディスク / dev / mmcblk0 : 14 . 7 GiB , 15804137472 バイト , 30867456 セクタ 単位 : セクタ ( 1 * 512 = 512 バイト ) セクタサイズ ( 論理 / 物理 ): 512 バイト / 512 バイト I / O サイズ ( 最小 / 推奨 ): 512 バイト / 512 バイト ディスクラベルのタイプ : dos ディスク識別子 : 0 xf6e75bf4 デバイス 起動 開始位置 最後から セクタ サイズ Id タイプ / dev / mmcblk0p1 2048 206847 204800 100 M c W95 FAT32 ( LBA ) / dev / mmcblk0p2 206848 30867455 30660608 14 . 6 G 83 Linux リサイズ パーティションテーブルの確認するとルートパーティションを割り当てているデバイスは 14.6Gなのでリサイズします。 # resize2fs / dev / mmcblk0p2 resize2fs 1 . 43 . 3 ( 04 - Sep - 2016 ) Filesystem at / dev / mmcblk0p2 is mounted on / ; on - line resizing required old_desc_blocks = 1 , new_desc_blocks = 1 The filesystem on / dev / mmcblk0p2 is now 3832576 ( 4 k ) blocks long . リサイズ確認すると、サイズが15Gに拡張されています。 # df - h ファイルシス サイズ 使用 残り 使用 % マウント位置 / dev / root 15 G 1 . 7 G 13 G 12 % / devtmpfs 457 M 0 457 M 0 % / dev tmpfs 462 M 0 462 M 0 % / dev / shm tmpfs 462 M 320 K 461 M 1 % / run tmpfs 462 M 0 462 M 0 % / sys / fs / cgroup tmpfs 462 M 0 462 M 0 % / tmp / dev / mmcblk0p1 100 M 18 M 82 M 19 % / boot tmpfs 93 M 0 93 M 0 % / run / user / 1000 タイムゾーン デフォルト設定の /etc/localtime のシンボリックリンクを削除し新しくタイムゾーンを設定する。 # rm - i / etc / localtime rm : remove symbolic link '/etc/localtime' ? y # ln - s / usr / share / zoneinfo / Asia / Tokyo / etc / localtime ロケール /etc/locale.gen を編集して使用するロケール（ja_JP.UTF-8 UTF-8) をアンコメントし、次のコマンドを実行する。 # locale - gen Generating locales ... ja_JP . UTF - 8 ... done Generation complete . ロケールを /etc/locale.conf で設定する。 # echo LANG = ja_JP . UTF - 8 > / etc / locale . conf ホスト名変更 hostnamectl コマンドの実行 以下のコマンドを実行する。 newhostname は適宜変更。 # hostnamectl set - hostname newhostname /etc/hosts の修正 変更したホスト名を /etc/hosts に追記する。 後でIPv6を無効化するので、IPv6ホストをコメントアウトしておく。 # vi / etc / hosts # # / etc / hosts : static lookup table for host names # # < ip - address > < hostname . domain . org > < hostname > 127 . 0 . 0 . 1 localhost . localdomain localhost newhostname #:: 1 localhost . localdomain localhost # End of file 固定IPアドレス プロファイルを使ってネットワーク接続を管理・設定する CLI ベースのツール netctl を使って固定IPアドレスの設定を行う。 このツールは netcfg ユーティリティを置き換える新しい Arch Linux の独自プロジェクトです。 netctl のインストール # pacman - Sy netctl :: Synchronizing package databases ... error : failed retrieving file ' core.db ' from mirror . archlinuxarm . org : Operation too slow . Less than 1 bytes / sec transferred the last 10 seconds error : failed to update core ( download library error ) extra 2 . 4 MiB 1976 K / s 00 : 01 [########################] 100 % community 3 . 9 MiB 2 . 53 M / s 00 : 02 [########################] 100 % alarm 110 . 2 KiB 393 K / s 00 : 00 [########################] 100 % aur is up to date 0 . 0 B 0 . 00 B / s 00 : 00 [ ------------------------ ] 0 % warning : netctl - 1 . 12 - 2 is up to date -- reinstalling resolving dependencies ... looking for conflicting packages ... Packages ( 1 ) netctl - 1 . 12 - 2 Total Download Size : 0 . 04 MiB Total Installed Size : 0 . 18 MiB Net Upgrade Size : 0 . 00 MiB :: Proceed with installation ? [ Y / n ] Y :: Retrieving packages ... netctl - 1 . 12 - 2 - any 36 . 1 KiB 361 K / s 00 : 00 [########################] 100 % ( 1 / 1 ) checking keys in keyring [########################] 100 % ( 1 / 1 ) checking package integrity [########################] 100 % ( 1 / 1 ) loading package files [########################] 100 % ( 1 / 1 ) checking for file conflicts [########################] 100 % ( 1 / 1 ) checking available disk space [########################] 100 % :: Processing package changes ... ( 1 / 1 ) reinstalling netctl [########################] 100 % 設定 netctl でネットワークの設定を行う。 プロファイルの設定 サンプルプロファイルを用いて、固定IPアドレス設定用のプロファイルを作成する。 なお、このプロファイルにはDNSの設定は行わない。 これはこのプロファイルにDNSの設定を行うと、 /etc/resolv.conf の上書き処理が行われ、空の /etc/resolv.conf となって しまうのを回避する為です。 # cp - p / etc / netctl / examples / ethernet - static / etc / netctl / eth0 # vi / etc / netctl / eth0 Description = 'A basic static ethernet connection' Interface = eth0 Connection = ethernet IP = static Address = ( '192.168.1.2/24' ) Gateway = '192.168.1.1' # netctl enable eth0 # systemctl enable netctl 不要サービスの停止 netctl でネットワークサービスを有効にする為、不要なネットワークサービスの 自動起動を無効にする。 # systemctl disable dhcpcd . service # systemctl disable systemd - networkd . service # systemctl disable systemd - resolved . service /etc/resolv.conf の修正 /etc/resolv.conf のシンボリックリンクを削除して、ファイルを作り直す。 # ls - al / etc / resolv . conf lrwxrwxrwx 1 root root 32 Oct 1 02 : 23 / etc / resolv . conf -> / run / systemd / resolve / resolv . conf # rm - i / etc / resolv . conf rm : remove symbolic link '/etc/resolv.conf' ? y # vim / etc / resolv . conf nameserver 192 . 168 . 1 . 1 名前解決確認 drill コマンドで名前解決可能か確認する。 # drill aol . com ;; - >> HEADER << - opcode : QUERY , rcode : NOERROR , id : 48505 ;; flags : qr rd ra ; QUERY : 1 , ANSWER : 5 , AUTHORITY : 4 , ADDITIONAL : 4 ;; QUESTION SECTION : ;; aol . com . IN A ;; ANSWER SECTION : aol . com . 2197 IN A 207 . 200 . 74 . 38 aol . com . 2197 IN A 64 . 12 . 89 . 186 aol . com . 2197 IN A 149 . 174 . 107 . 97 aol . com . 2197 IN A 64 . 12 . 79 . 57 aol . com . 2197 IN A 149 . 174 . 110 . 102 ;; AUTHORITY SECTION : aol . com . 661 IN NS dns-06 . ns . aol . com . aol . com . 661 IN NS dns-01 . ns . aol . com . aol . com . 661 IN NS dns-02 . ns . aol . com . aol . com . 661 IN NS dns-07 . ns . aol . com . ;; ADDITIONAL SECTION : dns-02 . ns . aol . com . 267 IN A 205 . 188 . 157 . 232 dns-06 . ns . aol . com . 1901 IN A 207 . 200 . 73 . 80 dns-07 . ns . aol . com . 267 IN A 64 . 236 . 1 . 107 dns-01 . ns . aol . com . 552 IN A 64 . 12 . 51 . 132 ;; Query time : 14 msec ;; SERVER : 192 . 168 . 0 . 1 ;; WHEN : Fri Oct 14 17 : 30 : 31 2016 ;; MSG SIZE rcvd : 256 IPv6の無効化 IPv6の無効設定 Arch Linux ではIPv6はデフォルトで有効になっている。特に使用しないので無効化する。 sysctl 設定を /etc/sysctl.d/40-ipv6.conf に追加する。 # vi / etc / sysctl . d / 40 - ipv6 . conf # Disable IPv6 net . ipv6 . conf . all . disable_ipv6 = 1 net . ipv6 . conf . eth0 . disable_ipv6 = 1 SSHサーバのIPv6無効化 特に無効化しなくても影響はないが不要なので無効化する。 AddressFamily inet に変更する。 # vi / etc / ssh / sshd_config AddressFamily inet OS再起動 reboot にてOS再起動し、SSHにて新しく設定したIPアドレスに接続する。 SSH接続を確認後、 ip a show コマンドで、IPv6のアドレスがないことを確認す る。 パスワードの変更 alarmユーザアカウントとrootアカウントのパスワードを passwd コマンドで変更する。 パッケージの更新 パッケージを最新に更新して再起動する。 # pacman - Syu ( snip ) # reboot パッケージのインストール 以下にて好みのパッケージをインストールする。 vimのインストール # pacman - Sy gvim :: Synchronizing package databases ... core 212 . 7 KiB 575 K / s 00 : 00 [########################] 100 % extra 2 . 4 MiB 505 K / s 00 : 05 [########################] 100 % community 3 . 9 MiB 1969 K / s 00 : 02 [########################] 100 % alarm 110 . 2 KiB 734 K / s 00 : 00 [########################] 100 % aur is up to date resolving dependencies ... :: There are 5 providers available for libgl : :: Repository extra 1 ) mesa - libgl :: Repository alarm 2 ) imx - gpu - viv - dfb 3 ) imx - gpu - viv - fb 4 ) imx - gpu - viv - wl 5 ) imx - gpu - viv - x11 Enter a number ( default = 1 ) : looking for conflicting packages ... warning : dependency cycle detected : warning : harfbuzz will be installed before its freetype2 dependency Packages ( 92 ) adwaita - icon - theme - 3 . 20 - 2 at - spi2 - atk - 2 . 22 . 0 - 1 at - spi2 - core - 2 . 22 . 0 - 1 atk - 2 . 22 + 1 + gd57f97d - 1 avahi - 0 . 6 . 32 - 2 cairo - 1 . 14 . 6 - 2 colord - 1 . 3 . 3 - 1 compositeproto - 0 . 4 . 2 - 3 damageproto - 1 . 2 . 1 - 3 dconf - 0 . 26 . 0 - 2 desktop - file - utils - 0 . 23 - 1 elfutils - 0 . 167 - 1 fixesproto - 5 . 0 - 3 fontconfig - 2 . 12 . 1 - 3 freetype2 - 2 . 7 - 2 gdk - pixbuf2 - 2 . 36 . 0 + 2 + ga7c869a - 1 glib - networking - 2 . 50 . 0 - 1 gpm - 1 . 20 . 7 - 7 graphite - 1 : 1 . 3 . 8 - 1 gsettings - desktop - schemas - 3 . 22 . 0 + 1 + g6f52ab5 - 1 gtk - update - icon - cache - 3 . 20 . 9 - 1 gtk3 - 3 . 20 . 9 - 1 harfbuzz - 1 . 3 . 2 - 1 hicolor - icon - theme - 0 . 15 - 1 inputproto - 2 . 3 . 2 - 1 jasper - 1 . 900 . 2 - 1 js17 - 17 . 0 . 0 - 3 json - glib - 1 . 2 . 2 + 4 + gd725fb5 - 1 kbproto - 1 . 0 . 7 - 1 lcms2 - 2 . 8 - 1 libcroco - 0 . 6 . 11 - 1 libcups - 2 . 2 . 1 - 1 libdaemon - 0 . 14 - 3 libdatrie - 0 . 2 . 10 - 1 libdrm - 2 . 4 . 71 - 1 libepoxy - 1 . 3 . 1 - 1 libgudev - 230 - 1 libgusb - 0 . 2 . 9 - 1 libice - 1 . 0 . 9 - 1 libjpeg - turbo - 1 . 5 . 1 - 1 libomxil - bellagio - 0 . 9 . 3 - 1 libpciaccess - 0 . 13 . 4 - 1 libpng - 1 . 6 . 25 - 1 libproxy - 0 . 4 . 12 - 2 librsvg - 2 : 2 . 40 . 16 - 1 libsm - 1 . 2 . 2 - 2 libsoup - 2 . 56 . 0 - 1 libthai - 0 . 1 . 24 - 1 libtiff - 4 . 0 . 6 - 2 libtxc_dxtn - 1 . 0 . 1 - 6 libx11 - 1 . 6 . 4 - 1 libxau - 1 . 0 . 8 - 2 libxcb - 1 . 12 - 1 libxcomposite - 0 . 4 . 4 - 2 libxcursor - 1 . 1 . 14 - 2 libxdamage - 1 . 1 . 4 - 2 libxdmcp - 1 . 1 . 2 - 1 libxext - 1 . 3 . 3 - 1 libxfixes - 5 . 0 . 3 - 1 libxft - 2 . 3 . 2 - 1 libxi - 1 . 7 . 7 - 1 libxinerama - 1 . 1 . 3 - 2 libxkbcommon - 0 . 6 . 1 - 1 libxml2 - 2 . 9 . 4 + 4 + g3169602 - 1 libxrandr - 1 . 5 . 1 - 1 libxrender - 0 . 9 . 10 - 1 libxshmfence - 1 . 2 - 1 libxt - 1 . 1 . 5 - 1 libxtst - 1 . 2 . 3 - 1 libxxf86vm - 1 . 1 . 4 - 1 llvm - libs - 3 . 8 . 1 - 1 mesa - 12 . 0 . 3 - 3 mesa - libgl - 12 . 0 . 3 - 3 nspr - 4 . 12 - 1 pango - 1 . 40 . 3 - 1 pixman - 0 . 34 . 0 - 1 polkit - 0 . 113 - 4 randrproto - 1 . 5 . 0 - 1 recordproto - 1 . 14 . 2 - 2 renderproto - 0 . 11 . 1 - 3 rest - 0 . 8 . 0 - 1 shared - mime - info - 1 . 7 - 1 vim - runtime - 8 . 0 . 0013 - 1 wayland - 1 . 12 . 0 - 1 wayland - protocols - 1 . 7 - 1 xcb - proto - 1 . 12 - 2 xextproto - 7 . 3 . 0 - 1 xf86vidmodeproto - 2 . 3 . 1 - 3 xineramaproto - 1 . 2 . 1 - 3 xkeyboard - config - 2 . 19 - 1 xproto - 7 . 0 . 31 - 1 gvim - 8 . 0 . 0013 - 1 Total Download Size : 9 . 80 MiB Total Installed Size : 297 . 91 MiB :: Proceed with installation ? [ Y / n ] Y :: Retrieving packages ... libx11 - 1 . 6 . 4 - 1 - armv7h 1992 . 8 KiB 1253 K / s 00 : 02 [########################] 100 % atk - 2 . 22 + 1 + gd57f97d ... 323 . 1 KiB 873 K / s 00 : 00 [########################] 100 % libxrender - 0 . 9 . 10 - 1 ... 19 . 8 KiB 0 . 00 B / s 00 : 00 [########################] 100 % harfbuzz - 1 . 3 . 2 - 1 - armv7h 252 . 6 KiB 526 K / s 00 : 00 [########################] 100 % libdrm - 2 . 4 . 71 - 1 - armv7h 172 . 3 KiB 539 K / s 00 : 00 [########################] 100 % libxfixes - 5 . 0 . 3 - 1 - a ... 10 . 5 KiB 0 . 00 B / s 00 : 00 [########################] 100 % mesa - 12 . 0 . 3 - 3 - armv7h 4 . 0 MiB 678 K / s 00 : 06 [########################] 100 % mesa - libgl - 12 . 0 . 3 - 3 ... 4 . 0 KiB 0 . 00 B / s 00 : 00 [########################] 100 % libcups - 2 . 2 . 1 - 1 - armv7h 262 . 0 KiB 1008 K / s 00 : 00 [########################] 100 % libxrandr - 1 . 5 . 1 - 1 - a ... 21 . 0 KiB 0 . 00 B / s 00 : 00 [########################] 100 % libxi - 1 . 7 . 7 - 1 - armv7h 139 . 0 KiB 927 K / s 00 : 00 [########################] 100 % jasper - 1 . 900 . 2 - 1 - armv7h 133 . 7 KiB 1215 K / s 00 : 00 [########################] 100 % gdk - pixbuf2 - 2 . 36 . 0 + ... 619 . 2 KiB 1126 K / s 00 : 01 [########################] 100 % colord - 1 . 3 . 3 - 1 - armv7h 539 . 6 KiB 1101 K / s 00 : 00 [########################] 100 % libxtst - 1 . 2 . 3 - 1 - armv7h 25 . 7 KiB 0 . 00 B / s 00 : 00 [########################] 100 % at - spi2 - core - 2 . 22 . 0 ... 209 . 4 KiB 582 K / s 00 : 00 [########################] 100 % at - spi2 - atk - 2 . 22 . 0 - ... 40 . 6 KiB 0 . 00 B / s 00 : 00 [########################] 100 % json - glib - 1 . 2 . 2 + 4 + g ... 174 . 2 KiB 726 K / s 00 : 00 [########################] 100 % gsettings - desktop - s ... 465 . 8 KiB 832 K / s 00 : 01 [########################] 100 % glib - networking - 2 . 5 ... 81 . 9 KiB 682 K / s 00 : 00 [########################] 100 % libsoup - 2 . 56 . 0 - 1 - armv7h 486 . 5 KiB 954 K / s 00 : 01 [########################] 100 % ( 92 / 92 ) checking keys in keyring [########################] 100 % ( 92 / 92 ) checking package integrity [########################] 100 % ( 92 / 92 ) loading package files [########################] 100 % ( 92 / 92 ) checking for file conflicts [########################] 100 % ( 92 / 92 ) checking available disk space [########################] 100 % :: Processing package changes ... ( 1 / 92 ) installing vim - runtime [########################] 100 % ( 2 / 92 ) installing gpm [########################] 100 % ( 3 / 92 ) installing xproto [########################] 100 % ( 4 / 92 ) installing libice [########################] 100 % ( 5 / 92 ) installing libsm [########################] 100 % ( 6 / 92 ) installing xcb - proto [########################] 100 % ( 7 / 92 ) installing libxdmcp [########################] 100 % ( 8 / 92 ) installing libxau [########################] 100 % ( 9 / 92 ) installing libxcb [########################] 100 % ( 10 / 92 ) installing kbproto [########################] 100 % ( 11 / 92 ) installing libx11 [########################] 100 % ( 12 / 92 ) installing libxt [########################] 100 % ( 13 / 92 ) installing atk [########################] 100 % ( 14 / 92 ) installing libpng [########################] 100 % ( 15 / 92 ) installing renderproto [########################] 100 % ( 16 / 92 ) installing libxrender [########################] 100 % ( 17 / 92 ) installing xextproto [########################] 100 % ( 18 / 92 ) installing libxext [########################] 100 % ( 19 / 92 ) installing graphite [########################] 100 % ( 20 / 92 ) installing harfbuzz [########################] 100 % Optional dependencies for harfbuzz cairo : hb - view program [ pending ] ( 21 / 92 ) installing freetype2 [########################] 100 % Optional dependencies for freetype2 libx11 : Some demo programs [ installed ] ( 22 / 92 ) installing fontconfig [########################] 100 % Fontconfig configuration is done via / etc / fonts / conf . avail and conf . d . Read / etc / fonts / conf . d / README for more information . Configuration via / etc / fonts / local . conf is still possible , but is no longer recommended for options available in conf . avail . Main systemwide configuration should be done by symlinks ( especially for autohinting , sub - pixel and lcdfilter ) : cd / etc / fonts / conf . d ln - s .. / conf . avail / XX - foo . conf Check also https : // wiki . archlinux . org / index . php / Font_Configuration and https : // wiki . archlinux . org / index . php / Fonts . updating font cache ... done . ( 23 / 92 ) installing pixman [########################] 100 % ( 24 / 92 ) installing libpciaccess [########################] 100 % ( 25 / 92 ) installing libdrm [########################] 100 % ( 26 / 92 ) installing libxml2 [########################] 100 % ( 27 / 92 ) installing wayland [########################] 100 % ( 28 / 92 ) installing xf86vidmodeproto [########################] 100 % ( 29 / 92 ) installing libxxf86vm [########################] 100 % ( 30 / 92 ) installing fixesproto [########################] 100 % ( 31 / 92 ) installing libxfixes [########################] 100 % ( 32 / 92 ) installing damageproto [########################] 100 % ( 33 / 92 ) installing libxdamage [########################] 100 % ( 34 / 92 ) installing libxshmfence [########################] 100 % ( 35 / 92 ) installing elfutils [########################] 100 % ( 36 / 92 ) installing libomxil - bellagio [########################] 100 % ( 37 / 92 ) installing libtxc_dxtn [########################] 100 % ( 38 / 92 ) installing llvm - libs [########################] 100 % ( 39 / 92 ) installing mesa [########################] 100 % Optional dependencies for mesa opengl - man - pages : for the OpenGL API man pages mesa - vdpau : for accelerated video playback libva - mesa - driver : for accelerated video playback ( 40 / 92 ) installing mesa - libgl [########################] 100 % ( 41 / 92 ) installing cairo [########################] 100 % ( 42 / 92 ) installing libjpeg - turbo [########################] 100 % ( 43 / 92 ) installing libtiff [########################] 100 % Optional dependencies for libtiff freeglut : for using tiffgt ( 44 / 92 ) installing libdaemon [########################] 100 % ( 45 / 92 ) installing avahi [########################] 100 % Optional dependencies for avahi gtk3 : avahi - discover - standalone , bshell , bssh , bvnc [ pending ] gtk2 : gtk2 bindings qt4 : qt4 bindings pygtk : avahi - bookmarks , avahi - discover python2 - twisted : avahi - bookmarks mono : mono bindings python2 - dbus : avahi - discover nss - mdns : NSS support for mDNS ( 46 / 92 ) installing libcups [########################] 100 % ( 47 / 92 ) installing libxcursor [########################] 100 % Optional dependencies for libxcursor gnome - themes - standard : fallback icon theme ( 48 / 92 ) installing xineramaproto [########################] 100 % ( 49 / 92 ) installing libxinerama [########################] 100 % ( 50 / 92 ) installing randrproto [########################] 100 % ( 51 / 92 ) installing libxrandr [########################] 100 % ( 52 / 92 ) installing inputproto [########################] 100 % ( 53 / 92 ) installing libxi [########################] 100 % ( 54 / 92 ) installing libepoxy [########################] 100 % ( 55 / 92 ) installing jasper [########################] 100 % Optional dependencies for jasper freeglut : for jiv support glu : for jiv support ( 56 / 92 ) installing gdk - pixbuf2 [########################] 100 % ( 57 / 92 ) installing compositeproto [########################] 100 % ( 58 / 92 ) installing libxcomposite [########################] 100 % ( 59 / 92 ) installing libdatrie [########################] 100 % ( 60 / 92 ) installing libthai [########################] 100 % ( 61 / 92 ) installing libxft [########################] 100 % ( 62 / 92 ) installing pango [########################] 100 % ( 63 / 92 ) installing shared - mime - info [########################] 100 % ( 64 / 92 ) installing lcms2 [########################] 100 % ( 65 / 92 ) installing libgusb [########################] 100 % ( 66 / 92 ) installing nspr [########################] 100 % ( 67 / 92 ) installing js17 [########################] 100 % ( 68 / 92 ) installing polkit [########################] 100 % ( 69 / 92 ) installing dconf [########################] 100 % ( 70 / 92 ) installing libgudev [########################] 100 % ( 71 / 92 ) installing colord [########################] 100 % Optional dependencies for colord sane : scanner support argyllcms : color profiling ( 72 / 92 ) installing recordproto [########################] 100 % ( 73 / 92 ) installing libxtst [########################] 100 % ( 74 / 92 ) installing at - spi2 - core [########################] 100 % ( 75 / 92 ) installing at - spi2 - atk [########################] 100 % ( 76 / 92 ) installing xkeyboard - config [########################] 100 % ( 77 / 92 ) installing libxkbcommon [########################] 100 % ( 78 / 92 ) installing hicolor - icon - theme [########################] 100 % ( 79 / 92 ) installing gtk - update - icon - cache [########################] 100 % ( 80 / 92 ) installing libcroco [########################] 100 % ( 81 / 92 ) installing librsvg [########################] 100 % ( 82 / 92 ) installing adwaita - icon - theme [########################] 100 % ( 83 / 92 ) installing json - glib [########################] 100 % ( 84 / 92 ) installing libproxy [########################] 100 % Optional dependencies for libproxy networkmanager : NetworkManager configuration module perl : Perl bindings [ installed ] python2 : Python bindings glib2 : gsettings configuration module [ installed ] js17 : PAC proxy support - Mozilla based pacrunner [ installed ] webkitgtk : PAC proxy support - Webkit based pacrunner ( 85 / 92 ) installing gsettings - desktop - schemas [########################] 100 % ( 86 / 92 ) installing glib - networking [########################] 100 % ( 87 / 92 ) installing libsoup [########################] 100 % ( 88 / 92 ) installing rest [########################] 100 % ( 89 / 92 ) installing wayland - protocols [########################] 100 % ( 90 / 92 ) installing desktop - file - utils [########################] 100 % ( 91 / 92 ) installing gtk3 [########################] 100 % Optional dependencies for gtk3 libcanberra : gtk3 - widget - factory demo ( 92 / 92 ) installing gvim [########################] 100 % Optional dependencies for gvim python2 : Python 2 language support python : Python 3 language support ruby : Ruby language support lua : Lua language support perl : Perl language support [ installed ] tcl : Tcl language support :: Running post - transaction hooks ... ( 1 / 8 ) Probing GDK - Pixbuf loader modules ... ( 2 / 8 ) Updating GIO module cache ... ( 3 / 8 ) Compiling GSettings XML schema files ... ( 4 / 8 ) Probing GTK3 input method modules ... ( 5 / 8 ) Updating icon theme caches ... ( 6 / 8 ) Updating the info directory file ... ( 7 / 8 ) Updating the desktop file MIME type cache ... ( 8 / 8 ) Updating the MIME type database ... 当初以下のエラーが出力されパッケージインストールコマンドを pacman -Sy gvim に変更した。 The requested URL returned error : 404 warning : failed to retrieve some files パッケージインストール後、 vim コマンドを実行しvimが起動することを確認する。 tmux のインストール pacman にてパッケージインストールする。 # pacman - Sy tmux :: Synchronizing package databases ... core is up to date extra is up to date community is up to date alarm is up to date aur is up to date 0 . 0 B 0 . 00 B / s 00 : 00 [ ------------------------ ] 0 % resolving dependencies ... looking for conflicting packages ... Packages ( 3 ) libevent - 2 . 0 . 22 - 2 libutempter - 1 . 1 . 6 - 2 tmux - 2 . 3 - 1 Total Download Size : 0 . 34 MiB Total Installed Size : 1 . 36 MiB :: Proceed with installation ? [ Y / n ] Y :: Retrieving packages ... libevent - 2 . 0 . 22 - 2 - a ... 185 . 3 KiB 299 K / s 00 : 01 [########################] 100 % libutempter - 1 . 1 . 6 - 2 ... 7 . 0 KiB 0 . 00 B / s 00 : 00 [########################] 100 % tmux - 2 . 3 - 1 - armv7h 155 . 1 KiB 431 K / s 00 : 00 [########################] 100 % ( 3 / 3 ) checking keys in keyring [########################] 100 % ( 3 / 3 ) checking package integrity [########################] 100 % ( 3 / 3 ) loading package files [########################] 100 % ( 3 / 3 ) checking for file conflicts [########################] 100 % ( 3 / 3 ) checking available disk space [########################] 100 % :: Processing package changes ... ( 1 / 3 ) installing libevent [########################] 100 % Optional dependencies for libevent python2 : to use event_rpcgen . py ( 2 / 3 ) installing libutempter [########################] 100 % ( 3 / 3 ) installing tmux [########################] 100 % sudo のインストール インストール pacman にてパッケージインストールする。 # pacman - Sy sudo :: Synchronizing package databases ... core is up to date extra is up to date community is up to date alarm is up to date aur is up to date 0 . 0 B 0 . 00 B / s 00 : 00 [ ------------------------ ] 0 % resolving dependencies ... looking for conflicting packages ... Packages ( 1 ) sudo - 1 . 8 . 18 - 1 Total Download Size : 0 . 89 MiB Total Installed Size : 4 . 08 MiB :: Proceed with installation ? [ Y / n ] y :: Retrieving packages ... sudo - 1 . 8 . 18 - 1 - armv7h 906 . 3 KiB 271 K / s 00 : 03 [########################] 100 % ( 1 / 1 ) checking keys in keyring [########################] 100 % ( 1 / 1 ) checking package integrity [########################] 100 % ( 1 / 1 ) loading package files [########################] 100 % ( 1 / 1 ) checking for file conflicts [########################] 100 % ( 1 / 1 ) checking available disk space [########################] 100 % :: Processing package changes ... ( 1 / 1 ) installing sudo [########################] 100 % 設定 以下のコマンドを実行して、ユーザー USER_NAME が sudo で完全な root 権限を与える。 # visudo USER_NAME ALL = ( ALL ) ALL /etc/pam.d/su と /etc/pam.d/su-l にある次の行をアンコメントして wheel グループのユーザ以外、 su 出来なくする。 auth required pam_wheel . so use_uid 参考文献 インストールガイド - ArchWiki netctl - ArchWiki resolv.conf - ArchWiki IPv6 - ArchWiki pacman - ArchWiki Vim - ArchWiki Secure Shell - ArchWiki Sudo - ArchWiki su - ArchWiki","tags":"ArchLinux","url":"https://lupinthe14th.github.io/arch-linux-arm-on-rasberry-pi2-nochu-qi-she-ding.html","loc":"https://lupinthe14th.github.io/arch-linux-arm-on-rasberry-pi2-nochu-qi-she-ding.html"},{"title":"MVNOのmineoに契約変更","text":"はじめに iPhone5s（au）の2年縛り契約が切れるので以前iPad Air2をUQ Mobileに変更したのと合 わせて見直ししました。 機器前提からMVNO事業者の選択肢 私の iPhone5sはSIM Freeではない古いやつ、かつキャリアは au 。 その為、選択肢は mineo か UQ mobile。 [1] UQ Mobile はSIMカード一枚毎に契約が必要。いちいちカード情報とか登録するのめん どい。また複数SIMカードを持っていても残ったパケットをシェアできない。 mineoは複数契約もすんなり。残ったパケットをシェアすることも可能。 mineoに変更 iPad Air2 はほとんど持ち歩かず、自宅内ではWi-Fi通信なので、消費パケットがほとん どない状態。でも持ち歩くときには単独で通信できるようにしたかった。 UQ Mobileはデータ転送速度が魅力的ではあったけど、今回の主眼は月々の通信費の最適 化なので残ったパケットを別のSIMカードでも使えるパケットシェアのサービスが魅力的 だったのでmineoに変更。 SIMカードの種類 iPhone5sではほとんど電話しないのでガラケーとの２台持ちにしてiPhone5sはデータ SIM（SMS付き）を契約します。 契約変更の流れ アマゾンでエントリーパックを購入 配送料・手数料込みで￥ 1,259- エントリーパックの郵送待ち 注文して３日ほどで届きました。 エントリーパックが届いたら記載のキーコードを使ってmineoのウェブ申し込みサイト でSIMカードを契約 SIMカードが届いたらiPhone5sに挿して動作確認 使えそうだと分かったので、ガラケー白ロム購入 今回購入したのは E10K ブラック 携帯電話 白ロム au 配送料・手数料込みで￥ 5,580- この時、まとめて充電器と卓上ホルダーを注文すればよかったのですが古いの探して からまた購入すりゃいいと判断して、携帯電話だけ購入。 この判断は失敗でした。ちょっと探してないのがわかったらすぐポチッちゃいまし た。 mineoの動作確認が終わったら、iphone5sは元のauのSIMカードに戻して使う 購入したガラケー白ロムが届いたらauショップに行って持ち込み機種変更をお願いする 機種変更中にiPhone5sのSIMカードをmineoのに変更。 mineoのSIMカードを使うにはプロファイルを変えなきゃいけないのでインターネットに 繋がる事が出来るギリギリにプロファイルをダウンロードして変更する。 機種変更終わったら晴れて二台持ち。 続けてiPad Air2用のもアマゾンでエントリーパックを購入 エントリーパックの郵送待ち エントリーパックが届いたら記載のキーコードを使ってmineoのマイページから追加SIM カードを契約 SIMカードが届いたらiPad Air2に挿して動作確認 使えそうだと分かったら、UQ mobileには電話で契約解除を連絡 契約解除する理由を聞かれましたので、自分のプランに最適な他事業者があるのでそ こに変更するんだと連絡。すんなり契約解除できました。 備考 UQ mobileの速さは魅力的なのであとはパケットシェアが出来ればUQ mobileに乗り換 えるかもしれない。 Footnotes [1] IIJとかもauのSIMカードの取り扱いを始めましたが、SIMロック解除ができない 古いiPhoneとかでは利用できないので。","tags":"misc","url":"https://lupinthe14th.github.io/mvnonomineoniqi-yue-bian-geng.html","loc":"https://lupinthe14th.github.io/mvnonomineoniqi-yue-bian-geng.html"},{"title":"Macでシリアル接続","text":"接続方法 デバイスの確認 % ls /dev/tty.usb* /dev/tty.usbserial-FTK1SOHS 接続 % screen /dev/tty.usbserial-FTK1SOHS 切断 Control-a k で、 Really kill this window [y/n] と表示されるので、 y を押して screen を終了する。 参考資料 Mac の screen コマンドでシリアル通信","tags":"memo","url":"https://lupinthe14th.github.io/macdeshiriarujie-sok.html","loc":"https://lupinthe14th.github.io/macdeshiriarujie-sok.html"},{"title":"Sophos home 使ってみる","text":"はじめに 最近ランサムウェアの情報が飛び交ってきているので気になっていろいろ調べたら ちょっと面白そうなSophos Home for PCs and Macsを試してみます。 なぜ興味を持った？ 一番興味を持ったのはSophos XG Firewall Home Edition。 [1] これを自宅に構築してみようと思ったけど、この機能でSecurity Heartbeat™なんてのが あるじゃないですか。 じゃ、手始めにエンドポイントのお試ししてみようと思ったわけです。 ダウンロード アカウントの作成 ここ のダウンロードボタン をクリックします。 すると、アカウント作成の画面になるので名前とE-mailアドレス、パスワードを入力して アカウントを作成します。（ダウンロードじゃないじゃん。） E-Mail認証からのログイン 登録したメールアドレスにメールが届きますので、Confirm Emailします。ログインの リンクを押してログイン画面を表示してE-mailとパスワードを入力してログインしま す。 やっとダウンロード Add Device -> Install で、インストールできます。 早速試してみます 早速機能を試しました。ざっくり一通り確認しただけなのでこれからちょっと利用し続け てみます。 ウイルススキャン フルスキャン試してます。Mac book Air OS X EL Capitan 1.6 GHz ( GB 1600 MHz DDR3 ですが、２時間ほど経過して75％ぐらいまで終わりました。 ウイルスダウンロード テストウイルス EICAR をダウンロードしようとするときっちりブロックしてくれます。（当たり前だけどちょっと感動） マルウェア The Anti-Malware Testfile の 68byteの文字列を適当な名前のファイルで作成します。するときっちり削除してくれま す。（これにも当たり前だけど感動） Web フィルタ カテゴリ毎にAllow, Warn, Blockが選択できます。この制御はクラウドにある ダッシュボードでデバイス毎に制御が可能です。子供向けに見せたくないカテゴリを Blockとかできますね。 Warnだと一旦警告画面が表示されて前画面に戻るかページを表示するか決めることがで きるようです。 Footnotes [1] Sophos XG Firewall Home Edition","tags":"security","url":"https://lupinthe14th.github.io/SophosHome.html","loc":"https://lupinthe14th.github.io/SophosHome.html"},{"title":"Arch Linux ARM on Rasberry Pi2 インストール","text":"ゴール 前提 インストール手順 前準備 インストール 起動 ログイン IPアドレスの調査 SSHログイン 所感 参考文献 ゴール Rasberry Pi2 に Arch Linux ARM のインストールを行い、ssh にて接続できる事をゴールとする。 前提 以下の機器を用いている。 Lenovo G570 MacBook Air USBメモリ（2GByte）これはlubuntu 14.04.2 LTSの起動メディアとして作成済み Raspberry Pi2 Model B ボード＆ケースセット- Physical Computing Lab Amazonベーシック ハイスピードHDMIケーブル 0.9m (タイプAオス - タイプAオス、イーサネット、3D、4K、オーディオリターン、PS3、PS4、Xbox360対応) モニタ（REGZA） iClever 2.4GHzミニワイヤレスキーボード(IC-RF01)/超便利MiniワイヤレスBluetoothキーボード iBUFFALO カードリーダー/ライター microSD対応 超コンパクト 東芝 Toshiba microSDHC UHS-I 16GB EXCERIA超高速95MB/秒 日本製、パッケージ品 並行輸入品 インストール手順 前準備 Lenovo G570のBIOSをUSBメモリからbootするように変更する USBメモリを挿し、電源ONでlubuntuで起動させる bsdtarをインストールする apt-get install bsdtar カードリーダー/ライターにmicroSDカードを挿入して、Lenobo G570に挿入 インストール Raspberry Pi 2 | Arch Linux ARM の通りインストールを行う。 対象デバイスは ls -al /dev/sd* でデバイスを確認し、 fdisk で中身を確認して間違えないようにする。 起動 作成したSDカードをRasberry Pi2に挿入し電源を入れ、モニターで起動を確認する。 ログイン アカウントとパスワードは Raspberry Pi 2 | Arch Linux ARM の通り。 IPアドレスの調査 DHCPで割り当てられたIPアドレスを調べる為、 ifconfig でIPアドレスを確認す る。 SSHログイン 確認したIPアドレスに対してMacBook AirのiTerm2からSSH接続する。 アカウントはrootじゃない方で。 % ssh alarm @192.168.0.2 alarm @192.168.0.2 ' s password : Welcome to Arch Linux ARM Website : http : //archlinuxarm.org Forum : http : //archlinuxarm.org/forum IRC : # archlinux - arm on irc . Freenode . net 無事SSH接続出来ました。 所感 当初はMacBook AirでなんとかArchLinuxのSDカードを作ろうとしていたが、手元にあるLenobo G570とlubuntuのUSBメモリでLinuxが利用できることに気がついたので、オフィシャルサイトの手順で作成できるこの方法に落ち着いた。 イメージファイルをダウンロードして dd で作成しようとしたが、イメージファイルが古いのしか見つけられなかったのもこの方法を選択した要因でもある。 参考文献 Arch Linux ARM Raspberry Pi 2にArch Linuxを設定する","tags":"ArchLinux","url":"https://lupinthe14th.github.io/arch-linux-arm-on-rasberry-pi2-insutoru.html","loc":"https://lupinthe14th.github.io/arch-linux-arm-on-rasberry-pi2-insutoru.html"},{"title":"UQ mobile で　MVNO デビュー","text":"はじめに データー通信しかしない iPad2 Air2 の２年縛り契約が切れるので契約してみました。 機器前提からMVNO事業者の選択肢 私の iPad Air2 は SIM Free ではない古いやつ、かつキャリアは au 。 その為、選択肢は mineo か UQ mobile。 [1] UQ mobile にしてみました UQmobile は、元KDDIバリューイネイブラーとかとのことなので、UQ mobile かな〜と思 い、オフィシャルサイトを開いたら、サポートセンターにチャットで問い合わせられるの で、問い合わせたところ、疑問点がサクサク解消。そのサイトですぐに契約出来るし、 mineo と比べて回線速度は UQmobile が良いとのことなので、そのまま契約しちゃいま した。それが一昨日の2/6。今日帰宅したら既に自宅に配送されていました。 早速試してみます で、早速 SIM を交換して、プロファイルのインストール。 プロファイルは、UQ mobile 公式では私の iPad Air2 は、iOS 9.2.1 では動かないので すが、非公式のプロファイル [2] で動作するとのことなので試したらあっさり4Gひろ ってくれました。 デザリングはできないのですが、ほぼ使わないので問題なし。 これで、iPad 分は月額¥980-に。 [3] てか、最近は、外でも滅多に使わないので、Wifi専用でもよかったんですがね……。 Footnotes [1] ざっくりしか調べていないので他にも選択肢があるのかも知れません [2] iOS端末でKDDI系MVNOが利用可能になるAPN構成プロファイルの公開 [3] データ高速プランの場合。データ無制限プランもあり、後で変更も手数料等発 生しないとのことでした。","tags":"misc","url":"https://lupinthe14th.github.io/uq-mobile-de-mvno-debiyu.html","loc":"https://lupinthe14th.github.io/uq-mobile-de-mvno-debiyu.html"},{"title":"Rasberry Pi2 の ルートファイルシステムを HDD 化（ついでにRAID1 化）","text":"目的 ルートファイルシステムの USB-HDD 化 Raserry Pi2 のディスクは、SDメモリカード。これは消去・書き込み可能回数が 限られている。 そこで、ルートファイルシステムを USB-HDD にすることにより、 消去・ 書き込み可能回数制限の制約を無くす。 1 RAID1 によるデータ保存の冗長化 USB-HDD を 冗長可能な構成にすることにより、データ保存の冗長化を図る。 なお調達の都合上、最初はUSB-HDD 一つでディグレード(片肺運転)のRAID構成を作成 する。 Install 手順 前提条件 以下に作業の前提条件を記載する。 Rasberry Pi2 のSDメモリカード boot 済み ARM/RaspberryPi - Ubuntu Wiki でSDメモリカードを作成し、Rasberry Pi2 で起動済み。 クライアント Mac OS X El Capitan (version 10.11.2) で作業 mdadm の Install 以下のコマンドをターミナルで実行する。 なお、途中で、postfix の設定画面が表示されるが、設定なしで抜ける。 $ sudo -i # apt-get install -y mdadm USB-HDD の構成 USB-HDD の構成を確認し、パーティションを再作成する。 現状の確認 fdisk コマンドで、USB-HDD の現状の構成を確認する。 # fdisk -l Disk /dev/mmcblk0: 15.8 GB, 15804137472 bytes ヘッド 4, セクタ 16, シリンダ 482304, 合計 30867456 セクタ Units = セクタ数 of 1 * 512 = 512 バイト セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスク識別子: 0x00000000 デバイス ブート 始点 終点 ブロック Id システム /dev/mmcblk0p1 * 2048 133119 65536 c W95 FAT32 (LBA) /dev/mmcblk0p2 133120 30867455 15367168 83 Linux Disk /dev/sda: 500.1 GB, 500107862016 bytes ヘッド 81, セクタ 63, シリンダ 191411, 合計 976773168 セクタ Units = セクタ数 of 1 * 512 = 512 バイト セクタサイズ (論理 / 物理): 512 バイト / 512 バイト I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト ディスク識別子: 0x75ee47c1 デバイス ブート 始点 終点 ブロック Id システム /dev/sda1 2048 976773167 488385560 83 Linux # df Filesystem 1K-blocks Used Available Use% Mounted on /dev/root 15100208 2903300 11550832 21% / devtmpfs 468772 4 468768 1% /dev none 4 0 4 0% /sys/fs/cgroup none 94612 292 94320 1% /run none 5120 0 5120 0% /run/lock none 473052 0 473052 0% /run/shm none 102400 0 102400 0% /run/user /dev/mmcblk0p1 65390 20334 45056 32% /boot/firmware パーティションの再作成 fdisk コマンドで、パーテーションを一度削除してパーテーションを新規作成し パーテーションタイプをRAID 自動認識:0xfdに書き換える。 # fdisk /dev/sda d コマンドで削除 n コマンドで p プライマリパーテーションを 全領域に設定 t コマンド パーテーション タイプは0xfd RAID auto p コマンドで確認後 w コマンドで書き込み終了 新規に作成したパーテーションテーブルを再起動せずに更新する。 # partprobe RAID デバイスの作成 USB-HDD 一つでディグレード(片肺運転)のRAIDデバイスを作成する。 RAID デバイスの作成 以下のコマンドを実行し、RAIDデバイスを作成する。 # mdadm -C /dev/md0 -l1 -n2 missing /dev/sda1 RAID デバイスの確認 以下のコマンドで、作成したRAIDデバイスの状態を確認する。 # cat /proc/mdstat Personalities : [raid1] md0 : active raid1 sda1[1] 488254336 blocks super 1.2 [2/1] [_U] unused devices: <none> ファイルシステムの作成 作成したRAIDデバイスにファイルシステムを作成する。 # mkfs /dev/md0 -t ext4 mke2fs 1.42.9 (4-Feb-2014) Filesystem label= OS type: Linux Block size=4096 (log=2) Fragment size=4096 (log=2) Stride=0 blocks, Stripe width=0 blocks 30523392 inodes, 122063584 blocks 6103179 blocks (5.00%) reserved for the super user First data block=0 Maximum filesystem blocks=0 3726 block groups 32768 blocks per group, 32768 fragments per group 8192 inodes per group Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 102400000 Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): done Writing superblocks and filesystem accounting information: done # mdadm 設定ファイルへ反映 作成したRAIDデバイスを mdadm.conf に反映する。 # mdadm -D -s ARRAY /dev/md0 metadata=1.2 name=ubuntu:0 UUID=243a78c7:63ef7642:af4a8dfe:5f1bc4ca # cat /etc/mdadm/mdadm.conf # mdadm.conf # # Please refer to mdadm.conf ( 5 ) for information about this file. # # by default ( built-in ) , scan all partitions ( /proc/partitions ) and all # containers for MD superblocks. alternatively, specify devices to scan, using # wildcards if desired. # DEVICE partitions containers # auto-create devices with Debian standard permissions CREATE owner=root group=disk mode=0660 auto=yes # automatically tag new arrays as belonging to the local system HOMEHOST <system> # instruct the monitoring daemon where to send mail alerts MAILADDR root # definitions of existing MD arrays ARRAY /dev/md0 metadata=1.2 name=ubuntu:0 UUID=243a78c7:63ef7642:af4a8dfe:5f1bc4ca # This file was auto-generated on Thu, 14 Jan 2016 16 :50:47 +0900 # by mkconf $Id $ mdadm 詳細確認 以下のコマンドを実行し、作成したRAIDデバイスの詳細を確認する。 # mdadm --detail /dev/md0 /dev/md0: Version : 1.2 Creation Time : Thu Jan 14 17:07:36 2016 Raid Level : raid1 Array Size : 488254336 (465.64 GiB 499.97 GB) Used Dev Size : 488254336 (465.64 GiB 499.97 GB) Raid Devices : 2 Total Devices : 1 Persistence : Superblock is persistent Update Time : Thu Jan 14 17:15:21 2016 State : clean, degraded Active Devices : 1 Working Devices : 1 Failed Devices : 0 Spare Devices : 0 Name : ubuntu:0 (local to host ubuntu) UUID : 243a78c7:63ef7642:af4a8dfe:5f1bc4ca Events : 2 Number Major Minor RaidDevice State 0 0 0 0 removed 1 8 1 1 active sync /dev/sda1 ルートファイルシステムの変更 以下の作業を行いルートファイルシステムをUSB-HDD に作成したRAIDデバイスに変更する。 マウントするデバイスの変更 ルートファイルシステムとしてUSB-HDDのRAIDデバイスを使うように /etc/fstab を修正する。 まず、UUIDを調べる。 2 # blkid /dev/mmcblk0p1: SEC_TYPE=\"msdos\" UUID=\"AB3E-B34D\" TYPE=\"vfat\" /dev/mmcblk0p2: UUID=\"3aee2e0f-21f9-43c8-a4d3-e864f5d72d37\" TYPE=\"ext4\" /dev/sda1: UUID=\"243a78c7-63ef-7642-af4a-8dfe5f1bc4ca\" UUID_SUB=\"c7d6abc9-e769-f9c2-2800-23713e71baed\" LABEL=\"ubuntu:0\" TYPE=\"linux_raid_member\" /dev/md0: UUID=\"1e34d0a9-5481-48c1-a51e-3b1e2230b0c5\" TYPE=\"ext4\" /etc/fstab を編集する。編集後は以下の通り。 # cat /etc/fstab proc /proc proc defaults 0 0 # /dev/mmcblk0p2 / ext4 defaults,noatime 0 1 UUID=1e34d0a9-5481-48c1-a51e-3b1e2230b0c5 / ext4 defaults,noatime 0 1 /dev/mmcblk0p1 /boot/firmware vfat defaults 0 2 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap [ on | off ] for that 起動ファイルシステムの指定の変更 /boot/cmdline.txt には起動時のルートファイルシステムとして SDカードの領域を 指定されている。 これをUSB-HDDのRAIDデバイスに変更する。 # cp /boot/cmdline.txt /boot/cmdline.txt.org # cat /boot/cmdline.txt dwc_otg.lpm_enable=0 console=tty1 root=UUID=1e34d0a9-5481-48c1-a51e-3b1e2230b0c5 rootfstype=ext4 elevator=deadline rootwait rootdelay=5 ルートファイルシステムのコピー 作成したRAIDデバイスのファイルシステムに、ルートファイルシステムの内容をコピーする。 # mount /dev/md0 /mnt # cd /mnt # cp -ax / . 参考資料 RASPBERRY PI RAID ARRAY WITH USB HDDS RAID1 によるraspberry pi のデータ保存の冗長化 Raspberry PI model B+ Raspberry Pi メモ (44) ハードディスク起動とヘアピンNAT USB-HDD で、USB2.0接続なので速度は落ちる。 ↩ USB-HDD なので、接続を変更するとデバイス名が変更となる場合があるのでUUIDを利用する。 ↩","tags":"Rasberry Pi","url":"https://lupinthe14th.github.io/USB-HDD boot.html","loc":"https://lupinthe14th.github.io/USB-HDD boot.html"},{"title":"nghttpd HTTP/2 お試し","text":"この記事は、 http2 Advent Calendar 2015 の17日目の記事です。 目次 目次 はじめに お試し内容 機器情報 nghttpd サーバー 負荷発生元クライアント SWITCHING-HUB nghttpd 実行環境の構築 前提パッケージのインストール nghttpd の設定 ベンチマークの取得 nginx との比較用 大量画像表示での比較 考察 nginx と比較用 大量画像表示での比較 まとめ 参考資料 はじめに nginx 、 H2O それぞれの HTTP/1.1 と HTTP/2 でのベンチマークを取得した。その ベンチマークの取得に利用したツール h2load は、HTTP/2 の C 言語の実装例である nghttp2 のライブラリの一つ。 このライブラリには、HTTP/2 server の、 nghttpd もあるので、これの HTTP/2 のベン チマークを取得する。 1 お試し内容 nghttpd 実行環境を Hyper-V 2012 R2 上の仮想サーバー（Ubuntu 14.04） に構築する h2load を用いてベンチマークを取得する h2load 実行クライアント（以後、負荷発生元クライアントと表記）は、同セグメント で別筐体上のHyper-V 2012 R2 上の仮想サーバーに構築した lubuntu を用いる SWITHING-HUB は、 1GBits/sec 規格 HTTP/2 で、 nginx のデフォルト index.html と、大量画像ファイル表示用 HTML でのベンチマークを取得する 機器情報 測定の際に利用する機器は以下の通り。 nghttpd サーバー ハードウェア: Systemworks Server S4032 ハイパバイザー: Hyper-V 2012 R2 OS: Ubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 60 model name : Intel ( R ) Celeron ( R ) CPU G1820 @ 2 . 70 GHz stepping : 3 microcode : 0 xffffffff cpu MHz : 2677 . 835 cache size : 2048 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 movbe popcnt xsave rdrand hypervisor lahf_lm abm xsaveopt fsgsbase erms bogomips : 5355 . 67 clflush size : 64 cache_alignment : 64 address sizes : 39 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 1 . 9 G 1 . 3 G 689 M 4 . 8 M 116 M 660 M -/+ buffers / cache : 526 M 1 . 4 G Swap : 2 . 0 G 0 B 2 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 14 . 04 DISTRIB_CODENAME = trusty DISTRIB_DESCRIPTION = \"Ubuntu 14.04.3 LTS\" 負荷発生元クライアント ハードウェア: Systemworks Server S9772 ハイパバイザー: Hyper-V 2012 R2 OS: lubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 62 model name : Intel ( R ) Xeon ( R ) CPU E5 - 2420 v2 @ 2 . 20 GHz stepping : 4 microcode : 0 xffffffff cpu MHz : 2170 . 472 cache size : 15360 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep erms xsaveopt bugs : bogomips : 4340 . 94 clflush size : 64 cache_alignment : 64 address sizes : 42 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 982 M 287 M 694 M 8 . 7 M 23 M 116 M -/+ buffers / cache : 147 M 834 M Swap : 1 . 0 G 0 B 1 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 15 . 04 DISTRIB_CODENAME = vivid DISTRIB_DESCRIPTION = \"Ubuntu 15.04\" SWITCHING-HUB ハードウェア情報: コレガ CG-SW16GTXLP nghttpd 実行環境の構築 前提パッケージのインストール ソースからビルドする為の前提パッケージをインストールする。 $ sudo apt-get install g++ make binutils autoconf automake autotools-dev \\ libtool pkg-config zlib1g-dev libcunit1-dev \\ libssl-dev libxml2-dev libev-dev libevent-dev \\ libjansson-dev libjemalloc-dev cython python3-dev \\ python-setuptools ソースをダウンロードしてビルドおよびインストールを行う。 $ cd /usr/local/src $ sudo git clone https://github.com/tatsuhiro-t/nghttp2.git $ cd nghttp2/ $ sudo autoreconf -i $ sudo automake $ sudo autoconf $ sudo ./configure $ sudo make $ sudo make install nghttpd コマンドが実行可能か確認する。 以下の様にコマンドを実行し、 nghttpd コマンドのヘルプが表示されることを確認する。 $ LD_LIBRARY_PATH = /usr/local/lib ; export LD_LIBRARY_PATH $ nghttpd --help nghttpd の設定 nghttpd の設定について以下に記載する。 ディレクトリの作成 ドキュメントルートおよび証明書ファイルの格納ディレクトリを作成する。 # mkdir - p / var / www / nghttpd # mkdir / usr / local / etc / nghttpd 自己署名証明書の作成 OpenSSL コマンドにて自己署名証明書を作成する。 途中、証明書要求ファイルを作成する際に入力を求められるが、FQDN のみ適切な値 を入力する。 # cd / usr / local / etc / nghttpd # openssl genrsa 2048 > cert . key # openssl req - new - key cert . key > cert . csr # openssl x509 - days 3650 - req - signkey cert . key < cert . csr > cert . pem Supervisor のインストールおよび設定 Supervisor のインストールを行い、nghttpd を登録して自動起動および起動停止を楽に 出来る様にする。 apt-get にて Supervisor のインストールを行う。 # apt - get install supervisor /etc/supervisor/conf.d/nghttpd.conf の編集を行い Supervisor に、 nghttpd の設定を行う。 [program:nghttpd] command = /usr/local/bin/nghttpd -m 1024 -d /var/www/nghttpd/ 443 /usr/local/etc/nghttpd/cert.key /usr/local/etc/nghttpd/cert.pem autostart = true autorestart = true environment = LD_LIBRARY_PATH=\"/usr/local/lib\" Supervisor の再起動 # service supervisor restart nghttpd の起動 # supervisorctl start nghttpd nginx デフォルト index.html の取得 nginx サーバーから、 wget で index.html を取得する。 nginx.localdomain nginx サーバーのFQDN # cd / var / www / nghttpd # wget https : // nginx . localdomain / --no-check-certificate 大量画像表示サイトの構築 大量の画像を表示するサイトを以下の方法で作成する。 テスト画像を、 Caltech 101 からダウンロードして、解凍する。 # cd / var / www / nghttpd # wget http : // www . vision . caltech . edu / Image_Datasets / Caltech101 / 101 _ObjectCategories . tar . gz # tar xfz 101 _ObjectCategories . tar . gz 画像数: 9144 容量: 151MByte img.html (513KBytes) を以下の様に作成する。 <html> <head> </head> <body> <h1> HTTP2 TEST </h1> <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0001.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0002.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0003.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0004.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0005.jpg\" > ・ ・ ・ <img src= \"101_ObjectCategories/yin_yang/image_0053.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0054.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0055.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0056.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0057.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0058.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0059.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0060.jpg\" > </body> </html> ベンチマークの取得 試験内容と得られたベンチマーク値をそれぞれ記載する。 nginx との比較用 後で nginx の結果と比較するので、同じ index.html (612bytes) を用いてベンチマークを 取得する。 リクエストコマンドの決定 nginx で使用したリクエスト数を生成するコマンドにて実行する。 コマンド h2load -n 100000 -c 50 -m 50 https://www.example.com/ h2load オプション説明 -n 総リクエスト数 -c クライアント数 -m クライアント当たりの、最大ストリーム並列数 ベンチマーク h2load 実行結果は以下の通り。 $ h2load - n 100000 - c 50 - m 50 https : // www . example . com starting benchmark ... spawning thread #0 : 50 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 1 . 62 s , 61841 . 20 req / s , 37 . 81 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 64106550 bytes total , 1105350 bytes headers ( space savings 93 . 82 % ) , 61200000 bytes data min max mean sd +/- sd time for request : 12 . 82 ms 97 . 39 ms 33 . 33 ms 9 . 64 ms 89 . 78 % time for connect : 240 . 24 ms 282 . 18 ms 259 . 50 ms 12 . 82 ms 54 . 00 % time to 1 st byte : 283 . 93 ms 336 . 99 ms 309 . 15 ms 15 . 10 ms 56 . 00 % req / s ( client ) : 1237 . 36 1255 . 62 1244 . 26 3 . 76 66 . 00 % 大量画像表示での比較 大量に画像を表示する img.html (513Kbytes) を用いてベンチマークを取得する。 リクエストコマンドの決定 クライアント数 = クライアント当たりの、最大ストリーム並列数 = 1021 から client could not connect to host が出始める 2 ので、 コマンドは以下を用いる。 コマンド h2load -n 100000 -c 1020 -m 1020 https://www.example.com/img.html h2load オプション説明 -n 総リクエスト数 -c クライアント数 -m クライアント当たりの、最大ストリーム並列数 ベンチマーク h2load 実行結果は以下の通り。なお、 H2O の場合のベンチマークは、5秒毎に3 回実行し、3回とも全てのリクエストが成功していた為、3回目の実行結果を採用し ていたが、 nghttpd では2回目3回目は HTTP4xx エラーが発生。 そこで実行結果は以下に全て記載する。 1回目 $ h2load - n 100000 - c 1020 - m 1020 https : // www . example . com / img . html starting benchmark ... spawning thread #0 : 1020 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 450 . 73 s , 221 . 86 req / s , 111 . 22 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 52562510160 bytes total , 1485680 bytes headers ( space savings 91 . 84 % ) , 52530400000 bytes data min max mean sd +/- sd time for request : 56 . 83 s 446 . 96 s 429 . 17 s 34 . 98 s 98 . 04 % time for connect : 561 . 03 ms 393 . 84 s 5 . 30 s 34 . 22 s 99 . 22 % time to 1 st byte : 1 . 44 s 394 . 08 s 5 . 89 s 34 . 19 s 99 . 22 % req / s ( client ) : 0 . 22 0 . 26 0 . 23 0 . 01 76 . 47 % 2回目 starting benchmark ... spawning thread #0 : 1020 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 72 . 37 s , 1381 . 70 req / s , 106 . 76 MB / s requests : 100000 total , 100000 started , 100000 done , 15386 succeeded , 84614 failed , 0 errored , 0 timeout status codes : 15386 2 xx , 0 3 xx , 84614 4 xx , 0 5 xx traffic : 8101811032 bytes total , 620554 bytes headers ( space savings 94 . 87 % ) , 8094934830 bytes data min max mean sd +/- sd time for request : 220 . 26 ms 69 . 56 s 11 . 09 s 24 . 84 s 84 . 61 % time for connect : 2 . 41 s 3 . 50 s 2 . 71 s 209 . 69 ms 61 . 67 % time to 1 st byte : 2 . 87 s 3 . 55 s 3 . 22 s 178 . 49 ms 60 . 20 % req / s ( client ) : 1 . 35 34 . 17 26 . 35 10 . 77 84 . 61 % 3回目 starting benchmark ... spawning thread #0 : 1020 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 250 . 96 s , 398 . 47 req / s , 110 . 43 MB / s requests : 100000 total , 100000 started , 100000 done , 55272 succeeded , 44728 failed , 0 errored , 0 timeout status codes : 55272 2 xx , 0 3 xx , 44728 4 xx , 0 5 xx traffic : 29060038344 bytes total , 1028368 bytes headers ( space savings 93 . 13 % ) , 29041267160 bytes data min max mean sd +/- sd time for request : 388 . 56 ms 248 . 25 s 132 . 46 s 118 . 83 s 55 . 27 % time for connect : 1 . 48 s 3 . 52 s 2 . 72 s 186 . 34 ms 68 . 63 % time to 1 st byte : 2 . 75 s 3 . 68 s 3 . 23 s 134 . 29 ms 66 . 57 % req / s ( client ) : 0 . 39 35 . 69 14 . 20 15 . 37 57 . 94 % 考察 nginx と比較用 nginx との比較用でのベンチマークは、以下の表の通り。 Time (sec) Requests/sec succeeded/Requests 1.62 61841.20 1 大量画像表示での比較 大量画像表示でのベンチマークは、計測回毎に以下の表の通り。 計測回 Time (sec) Requests/sec succeeded/Requests 1 450.73 221.86 1 2 72.37 1381.70 0.15386 3 250.96 398.47 0.55272 まとめ nginx との比較用では、 H2O とほぼ同じベンチマークが出た 大量画像表示でも、 H2O とほぼ同じベンチマークが出たが、2〜3回と繰り返すと HTTP4xx のエラーが発生。この条件だと信頼性は、 H2O に軍配があがった 参考資料 Nghttp2: HTTP/2 C Library - nghttp2.org tatsuhiro-t/nghttp2 Supervisor: A Process Control System — Supervisor 3.2.0 documentation nghttpd は HTTP/2 プロトコルのみ動作するので HTTP/1.1 との比較検証は不可。 nghttpx で可能かと思ったが、Reverse Proxy の為、単体での動作が不可なので HTTP/1.1 のベンチマーク取得はやめた。 ↩ 負荷発生クライアント側の open files の上限値 ulimit -n 1024 の為。 ↩","tags":"misc","url":"https://lupinthe14th.github.io/nghttpd-http2.html","loc":"https://lupinthe14th.github.io/nghttpd-http2.html"},{"title":"H2O HTTP/2 お試し","text":"この記事は、 http2 Advent Calendar 2015 の16日目の記事です。 目次 目次 はじめに H2O とは お試し内容 機器情報 H2O サーバー 負荷発生元クライアント SWITCHING-HUB H2O 環境の構築 前提パッケージのインストール OpenSSL 1.0.2 のインストール H2O のビルドおよびインストール H2O の設定 ベンチマークの取得 nginx との比較用 大量画像表示での比較 考察 nginx と比較用 大量画像表示での比較 まとめ 参考資料 はじめに nginx HTTP/2 お試しを行った際に検索にヒットした H2O 。 nginx HTTP/2 のベンチマークもあることだし、IoT 時代のHTTPサーバーとの触れ込みも あったのでモノは試しに検証してみます。 当初は、HTTP/1.1 と HTTP/2 で性能差が如実に出て終了となると思っていましたが、あ まり性能差が出ないので、大量の画像ファイルの表示での性能差もお試ししてみました。 H2O とは H2Oは現在ディー・エヌ・エーに勤める奥一穂氏を中心に、2014年から開発されている Webサーバー。プロジェクトの目的として、「クラウド、HTTP/2、常時TLS時代に最適化 されたHTTPサーバーを目指す」としている。H2OはMITライセンスを採用したオープン ソースプロダクトで、ソースコードはGitHubで公開されている。 引用元: Nginxより高速、HTTP/2 サーバー「H2O」 お試し内容 H2O サーバーを Hyper-V 2012 R2 上の仮想サーバー（Ubuntu 14.04） に構築する h2load を用いてベンチマークを取得する h2load 実行クライアント（以後、負荷発生元クライアントと表記）は、同セグメント で別筐体上のHyper-V 2012 R2 上の仮想サーバーに構築した lubuntu を用いる SWITHING-HUB は、 1GBits/sec 規格 HTTP/1.1 と HTTP/2 での接続の違いによる性能差を比べる 機器情報 測定の際に利用する機器は以下の通り。 H2O サーバー ハードウェア: Systemworks Server S4032 ハイパバイザー: Hyper-V 2012 R2 OS: Ubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 60 model name : Intel ( R ) Celeron ( R ) CPU G1820 @ 2 . 70 GHz stepping : 3 microcode : 0 xffffffff cpu MHz : 2677 . 835 cache size : 2048 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 movbe popcnt xsave rdrand hypervisor lahf_lm abm xsaveopt fsgsbase erms bogomips : 5355 . 67 clflush size : 64 cache_alignment : 64 address sizes : 39 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 1 . 9 G 1 . 3 G 689 M 4 . 8 M 116 M 660 M -/+ buffers / cache : 526 M 1 . 4 G Swap : 2 . 0 G 0 B 2 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 14 . 04 DISTRIB_CODENAME = trusty DISTRIB_DESCRIPTION = \"Ubuntu 14.04.3 LTS\" 負荷発生元クライアント ハードウェア: Systemworks Server S9772 ハイパバイザー: Hyper-V 2012 R2 OS: lubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 62 model name : Intel ( R ) Xeon ( R ) CPU E5 - 2420 v2 @ 2 . 20 GHz stepping : 4 microcode : 0 xffffffff cpu MHz : 2170 . 472 cache size : 15360 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep erms xsaveopt bugs : bogomips : 4340 . 94 clflush size : 64 cache_alignment : 64 address sizes : 42 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 982 M 287 M 694 M 8 . 7 M 23 M 116 M -/+ buffers / cache : 147 M 834 M Swap : 1 . 0 G 0 B 1 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 15 . 04 DISTRIB_CODENAME = vivid DISTRIB_DESCRIPTION = \"Ubuntu 15.04\" SWITCHING-HUB ハードウェア情報: コレガ CG-SW16GTXLP H2O 環境の構築 前提パッケージのインストール ソースからビルドする為の前提パッケージをインストールする。 $ sudo apt-get install cmake build-essential zlib1g zlib1g-dev OpenSSL 1.0.2 のインストール 前提であるOpenSSL をソースからインストールする。 その為に不要なパッケージを削除する。 $ sudo apt-get remove --purge openssl libssl-dev ソースをダウンロードしてビルドおよびインストールを行う。 # cd /usr/local/src # wget https://www.openssl.org/source/openssl-1.0.2e.tar.gz --no-check-certificate # tar xfz openssl-1.0.2e.tar.gz # cd openssl-1.0.2e/ # ./config --prefix = /usr/local --openssldir = /usr/local/openssl # make # make test # make install H2O のビルドおよびインストール 以下のコマンドを実行して、ビルドおよびインストールを行う。 $ sudo su - # cd /usr/local/src # wget https://github.com/h2o/h2o/archive/v1.6.0.tar.gz --no-check-certificate # tar xfz v1.6.0.tar.gz # cd h2o-1.6.0/ # cmake -DWITH_BUNDLED_SSL = on . # make # make install H2O の設定 H2O の設定について以下に記載する。 ディレクトリの作成 ドキュメントルート、設定ファイルおよびログ出力先のディレクトリを作成する。 # mkdir - p / var / www / h2o # mkdir / usr / local / etc / h2o # mkdir / var / log / h2o 自己署名証明書の作成 OpenSSL コマンドにて自己署名証明書を作成する。 途中、証明書要求ファイルを作成する際に入力を求められるが、FQDN のみ適切な値 を入力する。 # cd / usr / local / etc / h2o # openssl genrsa 2048 > cert . key # openssl req - new - key cert . key > cert . csr # openssl x509 - days 3650 - req - signkey cert . key < cert . csr > cert . pem h2o.conf の作成 お試し用の /usr/local/etc/h2o/h2o.conf の作成を行う。 hosts : \"www.example.com\" : listen : port : 443 ssl : certificate - file : / usr / local / etc / h2o / cert . pem key - file : / usr / local / etc / h2o / cert . key paths : \"/\" : file . dir : / var / www / h2o http2 - reprioritize - blocking - assets : ON # performance tuning option Supervisor のインストールおよび設定 Supervisor のインストールを行い、H2O を登録して自動起動および起動停止を楽に 出来る様にする。 apt-get にて Supervisor のインストールを行う。 # apt - get install supervisor /etc/supervisor/conf.d/h2o.conf の編集を行い Supervisor に、 H2O の設定を 行う。 [program:h2o] command = /usr/local/bin/h2o -c /usr/local/etc/h2o/h2o.conf autostart = true autorestart = true Supervisor の再起動 # service supervisor restart h2o の起動 # supervisorctl start h2o 大量画像表示サイトの構築 大量の画像を表示するサイトを以下の方法で作成する。 テスト画像を、 Caltech 101 からダウンロードして、解凍する。 # cd / var / www / h2o # wget http : // www . vision . caltech . edu / Image_Datasets / Caltech101 / 101 _ObjectCategories . tar . gz # tar xfz 101 _ObjectCategories . tar . gz 画像数: 9144 容量: 151MByte img.html (513KBytes) を以下の様に作成する。 <html> <head> </head> <body> <h1> HTTP2 TEST </h1> <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0001.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0002.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0003.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0004.jpg\" > <img src= \"101_ObjectCategories/BACKGROUND_Google/image_0005.jpg\" > ・ ・ ・ <img src= \"101_ObjectCategories/yin_yang/image_0053.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0054.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0055.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0056.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0057.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0058.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0059.jpg\" > <img src= \"101_ObjectCategories/yin_yang/image_0060.jpg\" > </body> </html> ベンチマークの取得 試験内容と得られたベンチマーク値をそれぞれ記載する。 nginx との比較用 後でnginx の結果と比較するので、同じ index.html (612bytes) を用いてベンチマークを 取得する。 リクエストコマンドの決定 nginx で使用したリクエスト数を生成するコマンドにて実行する。 なお、H2O は サーバー側の設定で、 HTTP/1.1 で動作させる様に設定できないっぽ い。 その為、HTTP/1.1 のベンチマーク取得の場合は、h2load のオプションに --h1 を付与して、強制的に HTTP/1.1 接続する。 コマンド HTTP/2 h2load -n 100000 -c 50 -m 50 https://www.example.com/ HTTP/1.1 h2load -n 100000 -c 50 -m 50 --h1 https://www.example.com/ h2load オプション説明 -n 総リクエスト数 -c クライアント数 -m クライアント当たりの、最大ストリーム並列数 --h1 接続プロトコルを HTTP/1.1 に強制 HTTP/2 でのベンチマーク HTTP/2 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 50 - m 50 https : // www . example . com starting benchmark ... spawning thread #0 : 50 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 1 . 62 s , 61617 . 18 req / s , 37 . 79 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 64306650 bytes total , 1305150 bytes headers ( space savings 92 . 50 % ) , 61200000 bytes data min max mean sd +/- sd time for request : 1 . 18 ms 103 . 48 ms 32 . 18 ms 11 . 91 ms 74 . 81 % time for connect : 240 . 06 ms 303 . 13 ms 270 . 74 ms 19 . 41 ms 56 . 00 % time to 1 st byte : 302 . 93 ms 368 . 81 ms 327 . 42 ms 17 . 43 ms 74 . 00 % req / s ( client ) : 1233 . 07 1474 . 02 1275 . 80 52 . 54 80 . 00 % HTTP/1.1 でのベンチマーク HTTP/1.1 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 50 - m 50 -- h1 https : // www . example . com starting benchmark ... spawning thread #0 : 50 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : http / 1 . 1 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 1 . 95 s , 51409 . 78 req / s , 41 . 53 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 84700000 bytes total , 18400000 bytes headers ( space savings 0 . 00 % ) , 61200000 bytes data min max mean sd +/- sd time for request : 1 . 83 ms 176 . 01 ms 41 . 44 ms 14 . 27 ms 88 . 34 % time for connect : 153 . 23 ms 304 . 62 ms 261 . 51 ms 39 . 09 ms 84 . 00 % time to 1 st byte : 271 . 43 ms 344 . 54 ms 319 . 40 ms 18 . 66 ms 78 . 00 % req / s ( client ) : 1028 . 91 1064 . 36 1041 . 95 8 . 90 62 . 00 % 大量画像表示での比較 大量に画像を表示する img.html (513Kbytes) を用いてベンチマークを取得する。 リクエストコマンドの決定 クライアント数 = クライアント当たりの、最大ストリーム並列数 = 1021 から client could not connect to host が出始める 1 ので、 コマンドは以下を用いる。 コマンド HTTP/2 h2load -n 100000 -c 1020 -m 1020 https://www.example.com/img.html HTTP/1.1 h2load -n 100000 -c 1020 -m 1020 --h1 https://www.example.com/img.html h2load オプション説明 -n 総リクエスト数 -c クライアント数 -m クライアント当たりの、最大ストリーム並列数 --h1 接続プロトコルを HTTP/1.1 に強制 HTTP/2 でのベンチマーク HTTP/2 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 1020 - m 1020 https : // www . example . com / img . html starting benchmark ... spawning thread #0 : 1020 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 459 . 49 s , 217 . 63 req / s , 109 . 09 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 52562722760 bytes total , 1682620 bytes headers ( space savings 90 . 60 % ) , 52530400000 bytes data min max mean sd +/- sd time for request : 399 . 97 s 457 . 42 s 444 . 73 s 10 . 91 s 74 . 85 % time for connect : 902 . 87 ms 3 . 95 s 2 . 43 s 593 . 99 ms 81 . 27 % time to 1 st byte : 2 . 06 s 4 . 34 s 3 . 01 s 508 . 95 ms 73 . 24 % req / s ( client ) : 0 . 21 0 . 24 0 . 22 0 . 01 75 . 78 % HTTP/1.1 でのベンチマーク HTTP/1.1 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 1020 - m 1020 -- h1 https : // www . example . com / img . html starting benchmark ... spawning thread #0 : 1020 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES128 - GCM - SHA256 Server Temp Key : ECDH P - 256 256 bits Application protocol : http / 1 . 1 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 459 . 23 s , 217 . 75 req / s , 109 . 14 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 52554400000 bytes total , 18900000 bytes headers ( space savings 0 . 00 % ) , 52530400000 bytes data min max mean sd +/- sd time for request : 3 . 29 s 458 . 31 s 230 . 99 s 131 . 57 s 57 . 74 % time for connect : 877 . 84 ms 3 . 80 s 2 . 44 s 526 . 48 ms 87 . 55 % time to 1 st byte : 1 . 97 s 4 . 28 s 3 . 13 s 460 . 73 ms 82 . 16 % req / s ( client ) : 0 . 21 0 . 25 0 . 22 0 . 01 79 . 31 % 考察 nginx と比較用 nginx との比較用でのベンチマークは、HTTP/1.1 および HTTP/2 でそれぞれ 以下の表の通り。 HTTP Version Time (sec) Requests/sec Requests/succeeded 1.1 1.95 51409.78 1 2 1.62 61617.18 1 大量画像表示での比較 大量画像表示でのベンチマークは、HTTP/1.1 および HTTP/2 でそれぞれ 以下の表の通り。 HTTP Version Time (sec) Requests/sec Requests/succeeded 1.1 459.23 217.75 1 2 459.49 217.63 1 まとめ H2O の場合だと、このリクエスト規模ではHTTP/1.1 と HTTP/2 の性能差は、 HTTP/2 の方が若干速い程度 単純なHTMLを表示する場合でも、大量画像表示HTMLの場合でも、HTTP/1.1 と、HTTP/2 の性能差は見られなかった つまり、HTTP/2 対応のブラウザのみがこの速度の恩恵を受けるものではない 爆速との記事を多数みてましたが、爆速。nginx との比較は後でやろうと思いますが約 2倍の速さ 参考資料 H2O - the optimized HTTP/2 server H2O - making HTTP better Home · h2o/h2o Wiki Kazuho's Weblog: H2O HTTP/2 server version 1.6.0 released h2o + supervisord で Munin を HTTP/2 でサーブさせてみた - mallowlabsの備忘録 Supervisor: A Process Control System — Supervisor 3.2.0 documentation [HTTP2] WindowsServerでHTTP2のベンチマーク - Qiita 負荷発生クライアント側の open files の上限値 ulimit -n 1024 の為。 ↩","tags":"misc","url":"https://lupinthe14th.github.io/h2o-http2.html","loc":"https://lupinthe14th.github.io/h2o-http2.html"},{"title":"nginx HTTP/2 お試し","text":"得してみた。 この記事は、 nginx Advent Calendar 2015 の9日目の記事です。 はじめに HTTP/2 が nginx 1.9.5 でサポートされた事を今更ながら知った。 どんなものかお試ししてみる。 この記事は、お試しする為の環境構築とお試し内容およびその考察について記載したもの です。 お試し内容 nginx 1.9.5 のhttp2 が有効か無効かの違いのみで、 h2load を用いてベンチマーク を取得する。 h2load 実行クライアント（以後、負荷発生元クライアントと表記）は、同セグメント で別筐体上のHyper-V 2012 R2 上の仮想サーバーに構築した lubuntu を用いる。 機器情報 測定の際に利用する機器は以下の通り。 nginx サーバー ハードウェア: Systemworks Server S4032 ハイパバイザー: Hyper-V 2012 R2 OS: Ubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 60 model name : Intel ( R ) Celeron ( R ) CPU G1820 @ 2 . 70 GHz stepping : 3 microcode : 0 xffffffff cpu MHz : 2677 . 835 cache size : 2048 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 movbe popcnt xsave rdrand hypervisor lahf_lm abm xsaveopt fsgsbase erms bogomips : 5355 . 67 clflush size : 64 cache_alignment : 64 address sizes : 39 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 1 . 9 G 1 . 3 G 689 M 4 . 8 M 116 M 660 M -/+ buffers / cache : 526 M 1 . 4 G Swap : 2 . 0 G 0 B 2 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 14 . 04 DISTRIB_CODENAME = trusty DISTRIB_DESCRIPTION = \"Ubuntu 14.04.3 LTS\" 負荷発生元クライアント ハードウェア: Systemworks Server S9772 ハイパバイザー: Hyper-V 2012 R2 OS: lubuntu # cat / proc / cpuinfo processor : 0 vendor_id : GenuineIntel cpu family : 6 model : 62 model name : Intel ( R ) Xeon ( R ) CPU E5 - 2420 v2 @ 2 . 20 GHz stepping : 4 microcode : 0 xffffffff cpu MHz : 2170 . 472 cache size : 15360 KB physical id : 0 siblings : 1 core id : 0 cpu cores : 1 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep erms xsaveopt bugs : bogomips : 4340 . 94 clflush size : 64 cache_alignment : 64 address sizes : 42 bits physical , 48 bits virtual power management : # free - h total used free shared buffers cached Mem : 982 M 287 M 694 M 8 . 7 M 23 M 116 M -/+ buffers / cache : 147 M 834 M Swap : 1 . 0 G 0 B 1 . 0 G # arch x86_64 # cat / etc / lsb - release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 15 . 04 DISTRIB_CODENAME = vivid DISTRIB_DESCRIPTION = \"Ubuntu 15.04\" 環境構築 測定を行う為に用いたnginx サーバーと 負荷発性元クライアントの構築方法をそれぞれ 以下に記載する。 負荷発生元クライアントの構築 負荷発生元クライアントに、 h2load をソースからインストールする。 必要パッケージのインストール 以下コマンドにて事前に必要なパッケージをインストールする。 $ sudo apt-get install g++ make binutils autoconf automake \\ autotools-dev libtool pkg-config zlib1g-dev \\ libcunit1-dev libssl-dev libxml2-dev libev-dev \\ libevent-dev libjansson-dev libjemalloc-dev cython \\ python3-dev python-setuptools ソースの取得 github リポジトリから、 git clone にて、リポジトリのクローンを作成する。 $ cd /usr/local/src $ sudo git clone https://github.com/tatsuhiro-t/nghttp2.git make make コマンドにて、ビルド -> インストールを行う。 $ cd nghttp2/ $ sudo autoreconf -i $ sudo automake $ sudo autoconf $ sudo ./configure $ sudo make $ sudo make install ライブラリへパスを通す ホームディレクトリの .profile を編集してライブラリへパスを通す。 LD_LIBRARY_PATH =/ usr / local / lib ; export LD_LIBRARY_PATH h2load コマンドの確認 .profile 編集後、 h2load コマンドが実行可能か確認する。以下の様にコマンド を実行し、 h2load コマンドのヘルプが表示されることを確認する。 $ source ~/.profile $ h2load --help nginx サーバーの構築 nginx サーバーの構築方法を以下に記載する。 nginx 1.9.5 のインストール nginx サーバーに、nginx 1.9.5 をソースからインストールする。 前提パッケージのインストール apt-get にてビルドに必要なパッケージをインストールする。 # sudo apt - get install build - essential libc6 libpcre3 libpcre3 - dev \\ libpcrecpp0 libssl0 . 9 . 8 libssl - dev zlib1g zlib1g - dev lsb - base ソースのダウンロードと解凍 以下のコマンドでソースをダウンロードし、解凍を行う。 # cd / usr / local / src # wget http : // nginx . org / download / nginx - 1 . 9 . 5 . tar . gz # tar xvfz nginx - 1 . 9 . 5 . tar . gz make 以下のコマンドにて、ビルドを行う。 # . / configure --with-http_ssl_module \\ --with-http_v2_module \\ --with-debug # make # make install nginx の設定 nginx.conf の作成 お試し用の /usr/local/nginx/conf/nginx.conf の作成を行う。 以下は、HTTP/2 を有効にした場合で、HTTP/2 を無効にする場合は、 listen 443 ssl http2; を listen 443 ssl; に変更する。 worker_processes 1 ; events { worker_connections 16384 ; } http { include mime . types ; default_type application / octet - stream ; sendfile on ; keepalive_timeout 65 ; server { listen 443 ssl http2 ; ssl_certificate cert . pem ; ssl_certificate_key cert . key ; ssl_session_cache shared : SSL : 1 m ; ssl_session_timeout 5 m ; ssl_ciphers AESGCM : HIGH : ! aNULL : ! MD5 ; ssl_prefer_server_ciphers on ; location / { root html ; index index . html index . htm ; } } } 自己署名証明書の作成 OpenSSL コマンドにて自己署名証明書を作成する。 途中、証明書要求ファイルを作成する際に入力を求められるが、FQDN のみ適切な値 を入力する。 # cd / usr / local / nginx / conf / # openssl genrsa 2048 > cert . key # openssl req - new - key cert . key > cert . csr # openssl x509 - days 3650 - req - signkey cert . key < cert . csr > cert . pem nginx Upstart の設定 Upstart に登録して自動起動および起動停止を楽に出来る様にする。 /etc/init/nginx.conf ファイルを作成する。 # nginx description \" nginx http daemon \" author \" George Shammas <georgyo@gmail.com> \" start on ( filesystem and net - device - up IFACE = lo ) stop on runlevel [ ! 2345 ] env DAEMON =/ usr / local / nginx / sbin / nginx env PID =/ var / run / nginx . pid expect fork respawn respawn limit 10 5 # oom never pre - start script $DAE MON - t if [ $? - ne 0 ] then exit $? fi end script exec $DAE MON Upstart の設定の再読み込み # initctl reload - configuration Upstar Job list の確認 # initctl list | grep nginx nginx の起動 # initctl start nginx 備考: nginx 1.9.X のパッケージからのインストール パッケージ探すのが面倒で、「いいや、ソースからビルドしてインストールしよう。」 と思い上記の通りとなったのだが、調べている内にパッケージインストールの方法も 見つかったし、後の設定も楽だなと再認識。 調べてる内にヒットしたサイトを元に試したパッケージインストールの方法も簡単に記載する。 なお、お試しはソースインストールした場合で実施している。 公式リポジトリを追加 nginxサイトが配布するPGPキーを追加する。 $ curl http://nginx.org/keys/nginx_signing.key | sudo apt-key add - リポジトリを一覧に追加する。この時、stable ではなく、 mainline を追加しま す。 $ sudo sh -c \"echo 'deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx' >> /etc/apt/sources.list\" $ sudo sh -c \"echo 'deb-src http://nginx.org/packages/mainline/ubuntu/ trusty nginx' >> /etc/apt/sources.list\" インストール 公式リポジトリの最新のパッケージをインストールします。 $ sudo apt-get update $ sudo apt-get install nginx インストール後の設定ファイルと自己署名証明書の設定は上記の通り。 今回パッケージインストールした後の nginx -V コマンドの結果は以下の通り。 $ nginx -V nginx version: nginx/1.9.8 built by gcc 4 .8.4 ( Ubuntu 4 .8.4-2ubuntu1~14.04 ) built with OpenSSL 1 .0.1f 6 Jan 2014 TLS SNI support enabled configure arguments: --prefix = /etc/nginx --sbin-path = /usr/sbin/nginx --conf-path = /etc/nginx/nginx.conf --error-log-path = /var/log/nginx/error.log --http-log-path = /var/log/nginx/access.log --pid-path = /var/run/nginx.pid --lock-path = /var/run/nginx.lock --http-client-body-temp-path = /var/cache/nginx/client_temp --http-proxy-temp-path = /var/cache/nginx/proxy_temp --http-fastcgi-temp-path = /var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path = /var/cache/nginx/uwsgi_temp --http-scgi-temp-path = /var/cache/nginx/scgi_temp --user = nginx --group = nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-threads --with-stream --with-stream_ssl_module --with-http_slice_module --with-mail --with-mail_ssl_module --with-file-aio --with-http_v2_module --with-cc-opt = '-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt = '-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed' --with-ipv6 ベンチマークの取得 nginx デフォルトの index.html (612bytes) を用いてベンチマークを取得する。 リクエストコマンドの決定 まず、HTTP/2 の場合に全て成功する場合のリクエストを生成する コマンドを決定する。 今回構築した環境で全て成功するリクエストと失敗が発生するリクエストの境界値は 以下コマンドにて生成したリクエストだった。 $ h2load -n 100000 -c 50 -m 50 https://nginx/ -n: 総リクエスト数 -c: クライアント数 -m: クライアント当たりの、最大ストリーム並列数 なお、総リクエスト数は変更せず、クライアント数＝最大ストリーム並列数として境 界値を探った。 HTTP/2 でのベンチマーク HTTP/2 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 50 - m 50 https : // nginx / starting benchmark ... spawning thread #0 : 50 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES256 - GCM - SHA384 Server Temp Key : ECDH P - 256 256 bits Application protocol : h2 progress : 10 % done progress : 20 % done progress : 30 % done progress : 40 % done progress : 50 % done progress : 60 % done progress : 70 % done progress : 80 % done progress : 90 % done progress : 100 % done finished in 3 . 69 s , 27122 . 09 req / s , 19 . 76 MB / s requests : 100000 total , 100000 started , 100000 done , 100000 succeeded , 0 failed , 0 errored , 0 timeout status codes : 100000 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 76402450 bytes total , 13400000 bytes headers ( space savings 23 . 86 % ) , 61200000 bytes data min max mean sd +/- sd time for request : 1 . 09 ms 283 . 45 ms 75 . 19 ms 32 . 83 ms 77 . 78 % time for connect : 173 . 30 ms 1 . 75 s 496 . 19 ms 487 . 37 ms 80 . 00 % time to 1 st byte : 212 . 51 ms 1 . 83 s 592 . 09 ms 482 . 91 ms 80 . 00 % req / s ( client ) : 542 . 83 616 . 43 567 . 14 14 . 13 72 . 00 % HTTP/1.1 でのベンチマーク HTTP/1.1 の場合に取得した値は以下の通り。 $ h2load - n 100000 - c 50 - m 50 https : // nginx / starting benchmark ... spawning thread #0 : 50 total client ( s ) . 100000 total requests TLS Protocol : TLSv1 . 2 Cipher : ECDHE - RSA - AES256 - GCM - SHA384 Server Temp Key : ECDH P - 256 256 bits Application protocol : http / 1 . 1 progress : 20 % done progress : 30 % done progress : 90 % done progress : 100 % done finished in 2 . 08 s , 23729 . 25 req / s , 19 . 04 MB / s requests : 100000 total , 73062 started , 100000 done , 49365 succeeded , 50635 failed , 50635 errored , 0 timeout status codes : 49365 2 xx , 0 3 xx , 0 4 xx , 0 5 xx traffic : 41526288 bytes total , 9179625 bytes headers ( space savings 0 . 00 % ) , 30211380 bytes data min max mean sd +/- sd time for request : 916 us 253 . 71 ms 17 . 18 ms 30 . 66 ms 92 . 47 % time for connect : 22 . 45 ms 165 . 97 ms 74 . 17 ms 43 . 27 ms 74 . 00 % time to 1 st byte : 23 . 37 ms 174 . 92 ms 78 . 54 ms 45 . 33 ms 74 . 00 % req / s ( client ) : 291 . 79 667 . 97 545 . 61 122 . 03 80 . 00 % ご参考 当初、HTTP/1.1 で全て処理できるリクエスト数を探り、同じリクエストを発行して HTTP/2の場合と比較するつもりだったが、HTTP/1.1 の場合は クライアント数＝最大ストリーム数＝１となった為、このリクエストでは負荷を与え られてないと判断したので、この観点からの検証はやめることにした。 なお、その時のコマンドの実行結果は以下の通り。 $ h2load -n 100000 -c 1 -m 1 https://nginx/ starting benchmark... spawning thread #0: 1 total client(s). 100000 total requests TLS Protocol: TLSv1.2 Cipher: ECDHE-RSA-AES256-GCM-SHA384 Server Temp Key: ECDH P-256 256 bits Application protocol: http/1.1 progress: 10% done progress: 20% done progress: 30% done progress: 40% done progress: 50% done progress: 60% done progress: 70% done progress: 80% done progress: 90% done progress: 100% done finished in 103.20s, 968.98 req/s, 795.35KB/s requests: 100000 total, 100000 started, 100000 done, 100000 succeeded, 0 failed, 0 errored, 0 timeout status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx traffic: 84051000 bytes total, 18595000 bytes headers (space savings 0.00%), 61200000 bytes data min max mean sd +/- sd time for request: 778us 8.32ms 1.01ms 121us 97.33% time for connect: 2.28ms 2.28ms 2.28ms 0us 100.00% time to 1st byte: 3.44ms 3.44ms 3.44ms 0us 100.00% req/s (client) : 968.98 968.98 968.98 0.00 100.00% 考察 HTTP/1.1 および HTTP/2 はそれぞれ以下の表の通り。 HTTP Version Time (sec) Requests/sec succeeded/Requests 1.1 2.08 23729.25 0.49365 2 3.69 27122.09 1 このお試しにより得られた結果としては以下のことが言えると思う。多少荒っぽい感も否 めないが……。 表より、HTTP/2 が耐えられるリクエスト数は、HTTP/1.1 では半分が耐えられない ご参考に記載しているが、HTTP/1.1 では、全てのリクエストが成功するのは、 クライアント数＝最大ストリーム並列数＝1 の場合のみ HTTP/2 でも、クライアント数＝最大ストリーム並列数＝70でも全て成功する場合も あったが、何度繰り返しても成功するのは、50の場合 よって全てのリクエストを処理する能力を単純比較すると、HTTP/2 は、HTTP/1.1 の50倍 参考資料 NGINX Open Source 1.9.5 Released with HTTP/2 Support tatsuhiro-t/nghttp2 nghttp2を使用する #1 Nginx 1.9.5 でHTTP2を試そう！ - あすのかぜ Ubuntu Upstart | NGINX nginxでhttp2を有効にする [HTTP2] WindowsServerでHTTP2のベンチマーク ServerBenchmarkRoundH210","tags":"misc","url":"https://lupinthe14th.github.io/nginx-http2.html","loc":"https://lupinthe14th.github.io/nginx-http2.html"},{"title":"sphinx-autobuild によるドキュメントのリビルド","text":"はじめに 日々の作業記録として自分向け日報を Sphinx を用いて作成している。この時、ローカル 環境で確認する手段として、 watch コマンドを用いて make html を実行させるよう にし、生成されたhtml ファイルを直接ブラウザで開いて確認していた。 そんな中、ふと技術系ブログをみていたら、 sphinx-autobuild なるツールが存在する ことを知りものは試しに導入してみた。 目的 確認したい時に最新のドキュメントが確認出来る。 この目的を満たすだけなら、 watch make html でも十分なのですが、なんとなくド キュメント更新していないのに、コマンドが実行されるのがエコじゃないと思っていたの もあります。 手順 前提条件 この手順は、Mac OS X Yosemite の場合についてです。 なお、Python の Virtualenvwrapper で、Sphinx の専用環境を作成しています。 sphinx-autobuild のインストール 以下コマンドを実行します。なお、Python の Virtualenvwrapper で、Sphinx の専用環 境を作成しています。 % workon report % pip install sphinx-autobuild sphinx-autobuild の使い方 sphinx-autobuild <ソースディレクトリ> <ビルド成果物出力ディレクトリ> ツールの公式ドキュメントには、Makefile に、コマンドを追加する例もあるようです。 所感 watch make html で、ファイルの出力先をブラウザで表示しているのと、ローカルhttp サーバーを起動したままなのはどちらがエコなのかは、考えないことにしよう。 参考資料 sphinx-autobuildで再ビルド、ブラウザの再リロードの手間を省いてSphinx文書をサクサク作成 Sphinx + Jenkins で始めるドキュメントの継続的インテグレーション","tags":"misc","url":"https://lupinthe14th.github.io/sphinx-autobuild.html","loc":"https://lupinthe14th.github.io/sphinx-autobuild.html"},{"title":"Nominum dnsperf / resperf での DNS キャッシュサーバーのストレステスト","text":"動機 Raspberry PiでつくるDNS キャッシュサーバ という記事 を読んで、自分もRasberry Pi で、NDJBDNS キャッシュサーバーを作っているので、ストレス テストを実施してみようと思った。 目的 Rasberry Pi2 で作った、NDJBDNS キャッシュサーバーのストレステスト Mac OS X からストレス付与出来るようにする。 Install 手順 前提条件 このインストール手順は、Mac OS X Yosemite の場合についてです。 dnsperf / resperf の Install 以下のコマンドをターミナルで実行する。 % ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" < /dev/null 2 > /dev/null % brew install dnsperf gunplot の install resperf の実行結果レポートを作成する resperf-report コマンドで使用する gunplot をインストールする。 AquaTerm、X11のインストール gunplot で利用する出力先ターミナルを事前にインストールする。 AquaTerm のインストール AquaTermのダウンロードページ から、インストーラーをダウンロードしインストールする。 X11 のインストール Mac用の X11ライブラリ XQuartz のダウンロードページ から、インストーラーをダウンロードして胃インストールする。 gunplot のインストール 以下のオプションを付与したコマンドでインストールする。 % brew install gnuplot --with-aquaterm --with-x11 ストレステスト ストレスツールのインストールが完了したので、目的であるRasberry Pi2 の DNS キャッシュサーバーへストレステストを行う。 dnsperf と resperf それぞれの特徴について dnsperf と、resperf はそれぞれ以下の特徴がある。 dnsperf 権威サーバや、LAN環境でのキャッシュサーバのテストではO.K. キャッシュのテストでWAN回線を使用した場合は結果が不十分になる可能性あり レスポンス状況でdnsperfの出す負荷(qps)が変化するため resperf レスポンス状態にかかわらず負荷を上げていくことができる したがって、テスト時にWAN環境の影響を受けにくい 今回はLAN環境のDNSキャッシュサーバーのストレステストだが、レスポンス状態に関わら ず負荷をあげたい為、 resperf を用いる。 事前準備 事前準備として、ストレステストで用いるクエリファイルを作成する。 クエリファイルの書式は、 queryperf と同じ書式で以下の様に記載する。 domain type サンプルは以下の通り。 試験の為に対象レコードは 100,000 規模で作成する。 example. com a example. com soa example. com ns example. com mx dnsperf で提供しているサンプルは以下にて取得可能。レコードは、 10,000,000 ある。 % wget ftp://ftp.nominum.com/pub/nominum//dnsperf/data/queryfile-example-current.gz ストレステストの実行 以下のコマンドを用いて、ストレステストを実行する。 192.168.0.7 は、ストレステスト対象のDNS キャッシュサーバーのIPアドレス。 % resperf-report -s 192 .168.0.7 -d query.txt -m 30000 ストレステストの結果 ストレステストのパターンとして、キャッシュヒット率100%と、0%の場合でストレステス トを実施した。 なお、前提条件として、ゾーンは２つ（正引きと逆引き）で、data の行数は、196,614で 行った。 キャッシュヒット率 100% の場合 キャッシュヒット率 100% の場合、つまり既にキャッシュされているドメイン名の名前解 決の場合は以下の通り。 Statistics: Queries sent : 214361 Queries completed : 214361 Queries lost : 0 Run time ( s ): 100 . 000000 Maximum throughput : 8352 . 000000 qps Lost at that point : 0 . 26 % Plots キャッシュヒット率 0% の場合 キャッシュヒット率 0% の場合、つまり全くキャッシュされていないドメイン名の名前解 決の場合は以下の通り。 Statistics: Queries sent : 67845 Queries completed : 67845 Queries lost : 0 Run time ( s ): 100 . 000000 Maximum throughput : 1374 . 000000 qps Lost at that point : 0 . 00 % Plots 参考資料 Raspberry PiでつくるDNS キャッシュサーバ DNSの評価と計測の話 Install dnsperf on Mac OSX DNS BIND queryperf インストール 設定 利用","tags":"Rasberry Pi","url":"https://lupinthe14th.github.io/dnsperf.html","loc":"https://lupinthe14th.github.io/dnsperf.html"},{"title":"chronyインストールおよび設定手順","text":"chronyインストールおよび設定手順 Rasberry Pi2 (Ubuntu 14.04 arm) へ chrony をインストール。 目的 NTPクライアントおよびローカルネットワークのNTPサーバーとして動作させる。 前提 ハードウェアは、Rasberry Pi2 で、ディストリビューションは、Ubuntu 14.04 $ uname -a Linux ubuntu 3.18.0-25-rpi2 #26-Ubuntu SMP PREEMPT Sun Jul 5 06:46:34 UTC 2015 armv7l armv7l armv7l GNU/Linux $ cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=14.04 DISTRIB_CODENAME=trusty DISTRIB_DESCRIPTION=\"Ubuntu 14.04.3 LTS\" 構築手順 インストール apt-get にてパッケージをインストールする。 $ sudo apt-get install chrony 設定 設定ファイルの編集を行う。 オリジナルとの差分は以下の通り。 $ diff /etc/chrony/chrony.conf /etc/chrony/chrony.conf.org 20,24c20,23 < server ntp.jst.mfeed.ad.jp offline minpoll 8 < server ntp.nict.jp offline minpoll 8 < server s2csntp.miz.nao.ac.jp offline minpoll 8 < server ntp.ring.gr.jp offline minpoll 8 < server ntp.shoshin.co.jp offline minpoll 8 --- > server 0.debian.pool.ntp.org offline minpoll 8 > server 1.debian.pool.ntp.org offline minpoll 8 > server 2.debian.pool.ntp.org offline minpoll 8 > server 3.debian.pool.ntp.org offline minpoll 8 起動 サービスの再起動を行い、ステータスを確認する。 $ sudo service chrony restart Restarting time daemon: Starting /usr/sbin/chronyd... chronyd is running and online. $ sudo service chrony status * chronyd is running 同期状況の確認 chronyc を用いる。( ntpq -p で確認している内容と同様） $ chronyc sources 210 Number of sources = 5 MS Name/IP address Stratum Poll Reach LastRx Last sample =============================================================================== &#94;- ntp3.jst.mfeed.ad.jp 2 8 37 230 -1809us[-1809us] +/- 126ms &#94;* ntp-b2.nict.go.jp 1 8 37 231 -136us[ -336us] +/- 15ms &#94;- 133.40.41.136 2 8 37 230 +2117us[+2117us] +/- 41ms &#94;+ ring.nict.go.jp 2 8 37 230 -6414us[-6414us] +/- 25ms &#94;- E210168211231.ec-userreve 1 8 37 231 +902us[ +902us] +/- 18ms 参考文献 How to install chrony package in Ubuntu Trusty","tags":"Rasberry Pi","url":"https://lupinthe14th.github.io/chrony.html","loc":"https://lupinthe14th.github.io/chrony.html"},{"title":"N-DJBDNS インストールおよび設定手順","text":"N-DJBDNS のインストールおよび設定手順 Rasberry Pi2 (Ubuntu 14.04 arm) へ、もっともセキュアと言われている N-DJBDNS のイ ンストールと設定を行います。 目的 以下の構成と基本動作を行う様にインストールと設定を行う。 構成 tinydns: コンテンツ管理サーバー dnscache: キャッシュサーバー としてローカルエリアのDNSとして動作させます。 基本動作 それぞれ、以下の動作を基本として設定します。 tinydns 127.0.0.1 で動作させる ローカルドメインのコンテンツ管理サーバー dnscache ローカルエリアからのクエリのみ受け付け ローカルドメインであれば、tinydns へ問い合わせ そうでなければ外部へ再帰検索を行う 前提 この手順の前提のハードウェアは、Rasberry Pi2 で、ディストリビューションは、 Ubuntu 14.04 を用います。 $ uname -a Linux ubuntu 3 .18.0-25-rpi2 #26-Ubuntu SMP PREEMPT Sun Jul 5 06:46:34 UTC 2015 armv7l armv7l armv7l GNU/Linux $ cat /etc/lsb-release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 14 .04 DISTRIB_CODENAME = trusty DISTRIB_DESCRIPTION = \"Ubuntu 14.04.3 LTS\" 構築手順 インストール 以下のコマンドを実行し、必要パッケージも纏めてインストールする。 $ sudo apt-get install djbdns 設定 ユーザの追加 必要なユーザーを追加する。 $ sudo adduser --no-create-home --disabled-login --shell /bin/false dnslog $ sudo adduser --no-create-home --disabled-login --shell /bin/false tinydns $ sudo adduser --no-create-home --disabled-login --shell /bin/false dnscache tinydns configuration $ sudo su - # tinydns-conf tinydns dnslog /etc/tinydns/ 127.0.0.1 # cd /etc/service ; ln -sf /etc/tinydns/ tinydns レコードを追加 data ファイルを記述し、 tinydns-data コマンドで、データベースを作成する。 localhost.localdomain. をローカルドメインとして管理して名前解決させる。 以下、data ファイルの作成例を以下に提示します。 data ファイルの作成 # vi / etc / tinydns / root / data . localhost . localdomain .:: ns . localhost . localdomain . . 0 . 168 . 192 . in - addr . arpa .:: ns . localhost . localdomain . = ns . localhost . localdomain .: 192 . 168 . 0 . 7 = gate . localhost . localdomain .: 192 . 168 . 0 . 1 = www . localhost . localdomain .: 192 . 168 . 0 . 32 tinydns-data コマンドでデータベースを作成 # cd / etc / tinydns / root # tinydns - data # ls - al data . cdb dnscache confiuration $ sudo su - # dnscache-conf dnscache dnslog /etc/dnscache 192.168.0.7 # cd /etc/service ; ln -sf /etc/dnscache/ 外部キャッシュサーバーのアドレスを設定 適宜自環境に合わせ、外部キャッシュサーバーに問い合わせする様に設定します。 例として、 OpenDNS を問い合わせ先に設定する場合を記載します。 # echo 208 . 67 . 222 . 222 > / etc / dnscache / root / servers /@ # echo 208 . 67 . 220 . 220 >> / etc / dnscache / root / servers /@ 外部キャッシュサーバーに問い合わせするように設定 # echo 1 > / etc / dnscache / env / FORWARDONLY ローカルネットワークの接続を許可 ローカルネットワーク内（今回は192.168.0.0/16）からのアクセスを許可 $ sudo touch /etc/dnscache/root/ip/192.168 ローカルドメインとローカルアドレスの問い合わせ先設定 localhost.localdomain ローカルドメインと、192.168.0.0/24 のローカルアドレス の逆引きは、tinydns に問い合わせするように設定。 # echo 127 . 0 . 0 . 1 >/ etc / service / dnscache / root / servers / localhost . localdomain . # echo 127 . 0 . 0 . 1 >/ etc / service / dnscache / root / servers / 0 . 168 . 192 . in - addr . arpa . 起動 サービスの起動を行い、ステータスを確認する。 # initctl start svscan svscan start / running , process 1612 # svstat / etc / service / tinydns / etc / service / tinydns : up ( pid 1619 ) 31 seconds # svstat / etc / service / dnscache / etc / service / dnscache : up ( pid 2133 ) 11 seconds 個別のサービス起動・停止方法 tinydns, dnscache のサービスを個別に開始・停止する場合は以下のコマンドを実行す る。 tinydns start $ sudo svc -u /etc/service/tinydns stop $ sudo svc -d /etc/service/tinydns dnscache start $ sudo svc -u /etc/service/dnscache stop $ sudo svc -d /etc/service/dnscache 参考文献 DJBDNS (TinyDNS) Install From Packages djbdnsでローカルドメインの名前解決をおこなう","tags":"Rasberry Pi","url":"https://lupinthe14th.github.io/ndjbdns.html","loc":"https://lupinthe14th.github.io/ndjbdns.html"},{"title":"Github SSH 接続手順 ~ 二段階認証対応 ~","text":"Github を二段階認証にすると SSH 接続でしか Push 出来なくなる。 そこで、 SSH 接続する為の方法をまとめる。 目的 Github に git push 可能になること 手順 前提条件 この手順は、Mac OS X Yosemite の場合についてです。 SSH 認証鍵の作成 作成する鍵の種類と鍵長は以下表の通り。鍵の種類は、DSAのセキュリティレベルのおよ そ2倍であると考えられる ECDSA（楕円曲線DSA）を用いる。 鍵の種類 鍵長 ECDSA鍵 521bit OpenSSH のアップデートおよび設定 Mac OS X Yosemite のデフォルトのOpenSSH の ssh-keygen および ssh-agent では ECDSA はサポートされていないので、以下の手順にてアップデートを行い、設定を行う。 % brew tap homebrew/dupes % brew install openssh --with-brewed-openssl --with-keychain-support % launchctl stop org.openbsd.ssh-agent % launchctl unload -w /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist sudo vi /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist で、 /usr/bin/ssh-agent を /usr/local/bin/ssh-agent に置換する。 % launchctl load -w -S Aqua /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist % export SSH_AUTH_SOCK = $( launchctl getenv SSH_AUTH_SOCK ) .zshrc を編集し、以下を追加する。 export PATH = /usr/ local /bin/ :${PATH} eval $ ( ssh - agent ) > /dev/ null SSH 認証の公開鍵と秘密鍵の作成 以下コマンドにて、公開鍵: id_ecdsa.pub と秘密鍵: id_ecdsa を作成する。 % cd ~/.ssh % ssh-keygen -t ecdsa -b 521 -C test@example.com SSH クライアント側へのSSH認証鍵の設定 SSH 接続を簡単にする為、 ~/.ssh/config の設定を行います。 Host github HostName github. com IdentityFile ~ /.ssh/ id_ecdsa User git Github へのSSH認証鍵の登録 SSH 公開鍵を登録します。 GitHubにブラウザでアクセス 左側メニューのSSH Keys -> Add key を選択 Title: に任意文字列を入力 Key: に pbcopy < ~/.ssh/id_ecdsa.pub を実行後のクリップボードを貼り付け Github への接続確認 接続に成功すると以下の様に表示される。 % ssh -T github Hi lupinthe14th! You've successfully authenticated, but GitHub does not provide shell access. ローカルリポジトリの設定を変更 リポジトリの設定ファイルを開き、URLの項目をgit@...からはじまるSSH接続方式に変更 する。 参考資料 GitHub Help - GitHub Enterprise Documentation How to Update OpenSSH on Mac OS X GitHubユーザーのSSH鍵6万個を調べてみた GitHubにSSH接続できるようにする方法 Updating OpenSSH on Mac OS X 10.10 Yosemite","tags":"misc","url":"https://lupinthe14th.github.io/Github-SSHConnection.html","loc":"https://lupinthe14th.github.io/Github-SSHConnection.html"},{"title":"blog 始めました","text":"技術系のネタをつらつらと blog で公開する事を始めました。 目的 目的と期待する効果は以下。 技術情報を開示することによる自己研鑽 技術情報の体系的なログ化 アフェリエイトで小銭稼ぎ アフェリエイトで小遣い稼ぎってのがちょっと生々しいですが、技術ネタを作成する為の ハードウェアの購入資金と、後々ドメインも取得して独自ドメインでこのブログを運用し ていきたいのでその資金に当てられればと思います。 世の中そんなに甘くないと思うので上手くいくとはおもいませんが、「ま、やってみっ か。」な軽いノリでぼちぼち更新したいと考えています。 自己紹介 初老を迎えたサーバー系のインフラエンジニア Python が好きだけど、業務でプロダクトの開発経験がないのでプログラミングに自信 はさっぱり IoT に興味あり。でも電子工作とかやった事なし IoT の興味から Erlang を覚えてみようと思っている今日この頃 趣味は走ったり、登ったり 本ブログについて Github Page を用いて公開しています。 記事の作成には、Ruby製の静的サイトジェネレーター Jekyll が有名ですが、Python が好きなのでPython 製がないか検索した所、 Pelican ヒットし、慣れている「reStructuredText」 「Markdown」 が使えるという事で、これを用います。 Github Page を用いる経緯 無料である Github アカウントを持っていたが活用していなかった エンジニアらしい優越感が持てる 上記が経緯です。 Tumblr でミニブログ使ってたのでサイト追加しようと思いましたが アフェリエイトには向かないとの情報が検索した際に目立っていたのでやめました。 参考資料 情報公開に感謝致します。 Pelican + Markdown + GitHub Pagesで管理するブログの作り方","tags":"misc","url":"https://lupinthe14th.github.io/blog-start.html","loc":"https://lupinthe14th.github.io/blog-start.html"},{"title":"アルコールストーブDIY","text":"アルコールストーブをDIYしてみた。 アルコールストーブを創ろう // 展開図（治具）＆説明 : アルコールストーブを創ろ う を参考に。 材料費: タリーズコーヒーアルミ缶×２＝￥250-（値引きで） 道具: 千枚通しみたいなのプラスドライバー大小カッターはさみラジオペンチ 工数: 4時間 材料はタリーズのアルミコーヒー缶 中身は美味しく頂きます。 フィルムをはがして洗って軽く乾燥させて。 できあがり。やすりとか持ってないのでバリは雑にしか取ってません。 こんな感じで燃焼してくれました。 なかなかの炎を出してくれてます。 沸騰実験。 燃料アルコール 20ml くらいでシェラカップに 200ml の水を入れて沸かしてみましたが、 沸騰手前で火は消えました。 30ml くらい突っ込めばいけるかな？ 時間は計るのを忘れましたが 5 分くらいでしょうか。 今度、何かの折につかってみよう。","tags":"DIY","url":"https://lupinthe14th.github.io/alcoholStove.html","loc":"https://lupinthe14th.github.io/alcoholStove.html"}]};